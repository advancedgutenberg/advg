{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/blocks/customstyles/custom-styles.jsx"],"names":["wpBlockEditor","wp","SUPPORTED_BLOCKS","addFilter","settings","customStyle","type","identifyColor","advgbBlocks","id","label","__","value","props","background","verticalAlign","borderRadius","border","width","height","display","marginLeft","cstyle","style","fontSize","hasBlockSupport","attributes","extraProps","withStyleClasses"],"mappings":"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","file":"custom-styles.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls } = wpBlockEditor;\n    const { SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n\n    const SUPPORTED_BLOCKS = [\n        'core/paragraph',\n        'core/heading',\n        'core/list',\n        'core/code',\n        'core/preformatted',\n        'core/table',\n        'core/columns',\n        'core/column',\n        'core/group',\n        'core/image',\n    ];\n\n\n    // Register custom styles to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/registerCustomStyleClass', function ( settings ) {\n        if (SUPPORTED_BLOCKS.includes( settings.name )) {\n            settings.attributes = Object.assign( settings.attributes, {\n                customStyle: {\n                    type: 'string'\n                },\n                identifyColor: {\n                    type: 'string'\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    // Add option to return to default style\n    if (typeof advgbBlocks.customStyles !== 'undefined' && advgbBlocks.customStyles) {\n        advgbBlocks.customStyles.unshift( {\n            id: 0,\n            label: __( 'Select a block style', 'advanced-gutenberg' ),\n            value: '',\n            identifyColor: ''\n        } );\n    }\n\n    // Add option to select custom styles for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/customStyles', function ( BlockEdit ) {\n        return ( props ) => {\n            return ( [\n                <BlockEdit key=\"block-edit-custom-class-name\" {...props} />,\n                props.isSelected && SUPPORTED_BLOCKS.includes( props.name ) &&\n                <InspectorControls key=\"advgb-custom-controls\">\n                    <div className=\"advgb-custom-styles-wrapper\">\n                        <SelectControl\n                            label={ [\n                                __( 'Block styles', 'advanced-gutenberg' ),\n                                <span className={'components-panel__color-area'}\n                                      key=\"customstyle-identify\"\n                                      style={ {\n                                          background: props.attributes.identifyColor,\n                                          verticalAlign: 'text-bottom',\n                                          borderRadius: '50%',\n                                          border: 'none',\n                                          width: '16px',\n                                          height: '16px',\n                                          display: 'inline-block',\n                                          marginLeft: '10px',\n                                      } } />\n                            ] }\n                            help={__( 'This option let you add custom style for the current block', 'advanced-gutenberg' )}\n                            value={props.attributes.customStyle}\n                            options={advgbBlocks.customStyles.map( ( cstyle, index ) => {\n                                if (cstyle.title) advgbBlocks.customStyles[ index ].label = cstyle.title;\n                                if (cstyle.name) advgbBlocks.customStyles[ index ].value = cstyle.name;\n\n                                return cstyle;\n                            } )}\n                            onChange={( cstyle ) => {\n                                const { identifyColor } = advgbBlocks.customStyles.filter( ( style ) => style.value === cstyle )[0];\n                                props.setAttributes( {\n                                    customStyle: cstyle,\n                                    identifyColor: identifyColor,\n                                    backgroundColor: undefined,\n                                    textColor: undefined,\n                                    fontSize: undefined,\n                                } );\n                            }}\n                        />\n                    </div>\n                </InspectorControls>\n            ] )\n        }\n    } );\n\n    // Apply custom styles on front-end\n    addFilter( 'blocks.getSaveContent.extraProps', 'advgb/loadFrontendCustomStyles', function ( extraProps, blockType, attributes ) {\n        if (hasBlockSupport( blockType, 'customStyle', true ) && attributes.customStyle) {\n            if (typeof extraProps.className === 'undefined') {\n                extraProps.className = attributes.customStyle;\n            } else {\n                extraProps.className += ' ' + attributes.customStyle;\n                extraProps.className = extraProps.className.trim();\n            }\n        }\n\n        return extraProps;\n    } );\n\n\n    const withStyleClasses = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ! SUPPORTED_BLOCKS.includes( props.name ) || !hasBlockSupport( props.name, 'customStyle', true ) ) {\n                return <BlockListBlock { ...props } />\n            }\n\n            const {\n                customStyle,\n            } = props.attributes;\n\n            return <BlockListBlock { ...props } className={ `${ customStyle }` } />;\n        };\n    }, 'withStyleClasses' );\n\n    // Apply custom styles on back-end\n    wp.hooks.addFilter( 'editor.BlockListBlock', 'advgb/loadBackendCustomStyles', withStyleClasses );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose );\n"],"sourceRoot":""}