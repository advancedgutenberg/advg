{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./node_modules/hour-convert/index.js","webpack:///./src/assets/blocks/0-adv-components/datetime.jsx","webpack:///./src/assets/blocks/0-adv-components/utils.jsx","webpack:///./src/assets/blocks/block-controls/block-controls.jsx"],"names":["AdvDateTimeControl","AdvDaysControl","AdvTimeControl","wp","components","ButtonGroup","Button","DateTimePicker","TextControl","CheckboxControl","Popover","Tooltip","element","Component","Fragment","useState","i18n","__","_x","props","popupState","setPopupState","togglePopup","state","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","moment","format","bind","advgbBlocks","timezone","length","replace","allDays","slug","label","days","onChangeDays","selectedDays","setSelectedDays","isDaySelected","some","el","onChangeDay","isSelected","updatedDays","filter","findDay","find","uniqueDays","Set","map","day","AdvTimeClass","onChangeTime","currentTime","hours","minutes","meridian","onInit","setState","includes","split","parseInt","prevProps","prevState","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","to24Hour","hour","meridiem","value","isNaN","res","handleChangeHours","Math","max","min","Number","event","target","handleKeyDownHours","key","handleChangeMinutes","handleKeyDownMinutes","to12Hour","onTimeClear","getOptionSuggestions","options","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","undefined","getOptionSlugs","slugs_array","option_title","matching_slug","push","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","addFilter","sprintf","hasBlockSupport","InspectorControls","BlockControls","ToggleControl","PanelBody","Notice","FormTokenField","SelectControl","createHigherOrderComponent","block_controls","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","controls","Object","keys","isControlEnabled","control","isAnyControlEnabledBlock","controlAttrs","globalControls","counter","blockControls","forEach","currentControlKey","isAnyControlEnabledGlobal","controlsAdded","controlExists","itemIndex","findIndex","newArray","obj","non_supported","settings","name","attributes","advgbBlockControls","type","items","default","withEditControls","BlockEdit","taxModOptions","termOptions","searchTermWord","initArchive","updateTaxLabels","isPost","taxonomies","allTaxonomies","getTaxonomies","terms","tax","term","user_roles","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","archiveControl","pageControl","pages","topic","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","result","currentTerms","changeControlKey","modifyTaxLabels","apiFetch","path","url","addQueryArgs","ids","then","list","singular","index","search","Array","from","a","data","select","getCurrentPostId","iniTaxLabels","prevBlockControls","prevTermWord","archive","initArchiveControl","searchTerms","taxonomiesChanged","schedule","marginBottom","newDate","thisDate","Date","getTime","setHours","fromDate","display","newTime","user_role","getUserRoles","changeArchiveControl","getPages","withAttributes","BlockListBlock","advgbBcClass","className","hooks","blocks","compose"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;;AAEA,iBAAiB,sBAAsB;AACvC;AACA;;AAEA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,KAAK,KAA6B;AAClC;AACA;AACA,EAAE,UAAU,IAA4E;AACxF;AACA,EAAE,iCAAqB,EAAE,mCAAE;AAC3B;AACA,GAAG;AAAA,oGAAC;AACJ,EAAE,MAAM,EAEN;AACF,CAAC;;;;;;;;;;;;;AC3DY;;AAEb;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO,EAAE,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;QC1BgBA,kB,GAAAA,kB;QAyEAC,c,GAAAA,c;QAgUAC,c,GAAAA,c;;AA/YhB;;;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","file":"block-controls.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","import hourConvert from 'hour-convert';\n\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip } = wp.components;\nconst { Component, Fragment, useState } = wp.element;\nconst { __, _x } = wp.i18n;\n\nexport function AdvDateTimeControl(props) {\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ( state ) => ! state );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ () => setPopupState( togglePopup ) }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => setPopupState( togglePopup ) }\n        \t\t\t\t/>\n                    </label>\n                    <div className=\"advgb-advcalendar-popover-timezone\">\n                        { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                            ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                            : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                    </div>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n\nexport function AdvDaysControl(props) {\n    const allDays = [\n        { slug: 0, label: _x( 'S', 'Sunday first letter', 'advanced-gutenberg' ) }, // Sunday\n        { slug: 1, label: __( 'M', 'advanced-gutenberg' ) }, // Monday\n        { slug: 2, label: _x( 'T', 'Tuesday first letter', 'advanced-gutenberg' ) }, // Tuesday\n        { slug: 3, label: __( 'W', 'advanced-gutenberg' ) }, // Wednesday\n        { slug: 4, label: _x( 'T', 'Thursday first letter', 'advanced-gutenberg' ) }, // Thursday\n        { slug: 5, label: __( 'F', 'advanced-gutenberg' ) }, // Friday\n        { slug: 6, label: _x( 'S', 'Saturday first letter', 'advanced-gutenberg' ) }  // Saturday\n    ];\n\n    const {\n        label,\n        days,\n        onChangeDays\n    } = props;\n\n    // Use a single state variable to store the selected days\n    const [ selectedDays, setSelectedDays ] = useState( days );\n\n    /**\n    * Check if the day is selected or not\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {bool}\n    */\n    function isDaySelected( slug ) {\n        return selectedDays.some( el => el === slug );\n    }\n\n    /**\n    * Update the selected days state when a checkbox is changed\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {void}\n    */\n    function onChangeDay( slug ) {\n\n        // Check if the day is already selected\n        const isSelected = isDaySelected( slug );\n\n        // Create a new array with the updated selection\n        let updatedDays;\n        if ( isSelected ) {\n            // Remove the day from the selected days\n            updatedDays = selectedDays.filter( el => el !== slug );\n        } else {\n            // Add the day to the selected days\n            const findDay = allDays.find( el => el.slug === slug );\n            updatedDays = [ ...selectedDays, findDay.slug ];\n        }\n\n        // Remove duplicates\n        const uniqueDays = [ ...new Set( updatedDays ) ];\n\n        // Update the selected days state\n        setSelectedDays( uniqueDays );\n\n        // Call the onChangeDays prop to notify the parent component of the change\n        if ( onChangeDays ) {\n            onChangeDays( updatedDays );\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"advgb-checkbox-wrapper\">\n                <label>\n                    { label }\n                </label>\n                <div className=\"advgb-checkbox-inline\">\n                    { allDays.map( day => (\n                        <CheckboxControl\n                            label={ day.label }\n                            checked={ isDaySelected( day.slug ) }\n                            onChange={ () => onChangeDay( day.slug ) }\n                        />\n                    ) ) }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nclass AdvTimeClass extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            onChangeTime: null,\n            currentTime: this.props.currentTime || null,\n            hours: null,\n            minutes: null,\n            meridian: 'am',\n            onInit: true\n        };\n    }\n\n    componentWillMount() {\n        const { onChangeTime, currentTime, onInit } = this.state;\n\n        if( this.props.onChangeTime !== onChangeTime ) {\n            this.setState( {\n                onChangeTime: this.props.onChangeTime,\n            } );\n        }\n\n        if( this.props.currentTime !== currentTime ) {\n            this.setState( {\n                currentTime: this.props.currentTime,\n            } );\n        }\n\n        // Init\n        if( currentTime && currentTime.includes(':') && onInit ) {\n            this.setState( {\n                hours:      currentTime.split(':')[0],\n                minutes:    currentTime.split(':')[1],\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\n                onInit:     false\n            } );\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { onChangeTime, currentTime } = this.props;\n        const { hours, minutes, meridian } = this.state;\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\n\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\n\n            // When clearing time\n            if( ! hours && ! minutes ) {\n                return;\n            }\n\n            // Default minutes when hours selected\n            if( hours && ! minutes ) {\n                this.setState( {\n                    minutes: '00'\n                } );\n            }\n\n            // Default hours when minutes selected\n            if( minutes && ! hours ) {\n                this.setState( {\n                    hours: '01'\n                } );\n            }\n\n            /* Convert 12-hours to 24-hours.\n             * e.g. 12:00 AM becomes 00:00:00\n             *      12:00 PM becomes 12:00:00\n             *      01:00 PM becomes 13:00:00\n             */\n            const savedTime   = `${this.appendZero(\n                                    hourConvert.to24Hour( {\n                                        hour: parseInt( hours ),\n                                        meridiem: meridian\n                                    } )\n                                )}:${minutes}:00`;\n\n            // Value saved in source/attribute\n            this.props.onChangeTime( savedTime );\n        }\n    }\n\n    /**\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\n     *\n     * @since 3.1.2\n     *\n     * @param {string value Hours or minutes\n     *\n     * @return {string}\n     */\n    appendZero( value ) {\n        if( isNaN( value ) ) {\n            return;\n        }\n\n        const res = parseInt( value );\n\n        return res > 9 ? res : `0${res}`;\n    }\n\n    render() {\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\n\n        // Make sure hours are valid. 01: min, 12: max\n        const handleChangeHours = event => {\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\n            this.setState( {\n                hours: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for hours\n        const handleKeyDownHours = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 12 ) {\n                this.setState( {\n                    hours: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\n                this.setState( {\n                    hours: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        // Make sure minutes are valid. 01: min, 59: max\n        const handleChangeMinutes = event => {\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\n            this.setState( {\n                minutes: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for minutes\n        const handleKeyDownMinutes = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 59 ) {\n                this.setState( {\n                    minutes: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\n                this.setState( {\n                    minutes: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        return (\n            <Fragment>\n                <div className=\"advgb-advtime-control\">\n                    <label>\n                        { this.props.label }\n                    </label>\n                    <div className=\"advgb-advtime-hours-minutes\">\n                        <input\n                            type=\"text\"\n                            value={\n                                hours\n                                    ? this.appendZero(\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\n                                    ) : ''\n                            }\n                            onChange={ handleChangeHours }\n                            onKeyDown={ handleKeyDownHours }\n                            placeholder=\"--\"\n                        />\n                        <span>:</span>\n                        <input\n                            type=\"text\"\n                            value={\n                                minutes ? minutes : ''\n                            }\n                            onChange={ handleChangeMinutes }\n                            onKeyDown={ handleKeyDownMinutes }\n                            placeholder=\"--\"\n                        />\n                    </div>\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\n                        <Button\n                            variant={\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'am'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'AM', 'advanced-gutenberg' ) }\n                        </Button>\n                        <Button\n                            variant={\n                                meridian === 'pm' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'pm'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'PM', 'advanced-gutenberg' ) }\n                        </Button>\n                    </ButtonGroup>\n                    { hours && minutes &&\n        \t\t\t\t<Button\n                            className=\"advgb-advtime-remove-icon\"\n        \t\t\t\t\ticon=\"no-alt\"\n                            onClick={\n                                () => {\n                                    this.props.onTimeClear();\n                                    this.setState( {\n                                        hours: null,\n                                        minutes: null,\n                                        meridian: 'am'\n                                    } );\n                                }\n                            }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </Fragment>\n        )\n    }\n}\nexport default AdvTimeClass;\n\nexport function AdvTimeControl(props) {\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\n\n    return(\n        <AdvTimeClass\n            label={ label }\n            currentTime={ currentTime }\n            onChangeTime={ onChangeTime }\n            onTimeClear={ onTimeClear }\n        />\n    );\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                                <AdvDaysControl\n                                                    label={ __( 'On these days (optional)', 'advanced-gutenberg' ) }\n                                                    days={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            : []\n                                                    }\n                                                    onChangeDays={ ( value ) => this.changeControlKey( 'schedule', 'days', value ) }\n                                                />\n                                                <label style={ { marginBottom: 8, display: 'block' } }>\n                                                    { __( 'Between these times (optional)', 'advanced-gutenberg' ) }\n                                                </label>\n                                                <AdvTimeControl\n                                                    label={ __( 'From', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            : null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeFrom',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeFrom', null ) }\n                                                />\n                                                <AdvTimeControl\n                                                    label={ __( 'To', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeTo' ) || null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeTo',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeTo', null ) }\n                                                />\n                                                { (\n                                                    currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                    && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    && (\n                                                        '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeFrom'\n                                                        ) >= '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeTo'\n                                                        )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"To\" time should be after \"From\" time!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { (\n                                                    (\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && ! currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    ) || (\n                                                        ! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( 'Please choose \"From\" time and \"To\" time.', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n\n                                                <Notice\n                                                    className=\"advgb-notice-sidebar\"\n                                                    status=\"info\"\n                                                    isDismissible={ false }\n                                                >\n                                                    { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                                                        ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                                                        : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                                                </Notice>\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'hidden',\n                                                            label: __( 'Hide from everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { this.isPost() && (\n                                    // Placeholder message when Archive and Page controls not available in post edit\n                                    <Fragment>\n                                        <hr className=\"advgb-hr-separator\" />\n                                        <div>\n                                            { __( 'Term archives & Pages controls are available in Widgets and FSE screens.', 'advanced-gutenberg' ) }\n                                        </div>\n                                    </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}