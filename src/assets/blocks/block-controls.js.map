{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./src/assets/blocks/0-adv-components/datetime.jsx","webpack:///./src/assets/blocks/0-adv-components/utils.jsx","webpack:///./src/assets/blocks/block-controls/block-controls.jsx"],"names":["AdvDateTimeControl","props","wp","components","Button","DateTimePicker","Popover","Tooltip","element","Fragment","useState","__","i18n","popupState","setPopupState","togglePopup","state","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","moment","format","bind","advgbBlocks","timezone","length","replace","getOptionSuggestions","options","map","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","find","slug","undefined","getOptionSlugs","slugs_array","option_title","matching_slug","push","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","addFilter","sprintf","hasBlockSupport","InspectorControls","BlockControls","ToggleControl","PanelBody","Notice","FormTokenField","SelectControl","createHigherOrderComponent","Component","parseInt","block_controls","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","controls","Object","keys","isControlEnabled","control","isAnyControlEnabledBlock","controlAttrs","globalControls","counter","blockControls","forEach","currentControlKey","isAnyControlEnabledGlobal","key","controlsAdded","controlExists","some","itemIndex","findIndex","newArray","obj","non_supported","Set","settings","includes","name","attributes","advgbBlockControls","type","items","default","withEditControls","BlockEdit","taxModOptions","termOptions","searchTermWord","initArchive","updateTaxLabels","isPost","taxonomies","allTaxonomies","getTaxonomies","terms","tax","term","user_roles","platforms","browsers","page","value","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","browserControl","platformControl","archiveControl","pageControl","pages","topic","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","el","result","currentTerms","changeControlKey","setState","filter","modifyTaxLabels","apiFetch","path","url","addQueryArgs","ids","then","list","singular","index","search","Array","from","a","data","select","getCurrentPostId","iniTaxLabels","prevProps","prevState","isSelected","prevBlockControls","prevTermWord","archive","initArchiveControl","searchTerms","taxonomiesChanged","schedule","marginBottom","newDate","thisDate","Date","getTime","setHours","fromDate","user_role","label","getUserRoles","browser","getBrowsers","platform","getPlatforms","changeArchiveControl","getPages","withAttributes","BlockListBlock","advgbBcClass","className","hooks","blocks","compose"],"mappings":"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","file":"block-controls.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export function AdvDateTimeControl(props) {\n    const { Button, DateTimePicker,  Popover, Tooltip } = wp.components;\n    const { Fragment, useState } = wp.element;\n    const { __ } = wp.i18n;\n\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ( state ) => ! state );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ () => setPopupState( togglePopup ) }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => setPopupState( togglePopup ) }\n        \t\t\t\t/>\n                    </label>\n                    <div className=\"advgb-advcalendar-popover-timezone\">\n                        { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                            ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                            : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                    </div>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get platforms\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPlatforms() {\n                return typeof advgb_block_controls_vars.platforms !== 'undefined'\n                        && advgb_block_controls_vars.platforms.length > 0\n                            ? advgb_block_controls_vars.platforms\n                            : [];\n            }\n\n            /**\n             * Get browsers\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getBrowsers() {\n                return typeof advgb_block_controls_vars.browsers !== 'undefined'\n                        && advgb_block_controls_vars.browsers.length > 0\n                            ? advgb_block_controls_vars.browsers\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const browserControl = {\n                    control: 'browser',\n                    enabled: true,\n                    browsers: [],\n                    approach: 'public'\n                };\n                const platformControl = {\n                    control: 'platform',\n                    enabled: true,\n                    platforms: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    browserControl\n                                ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    platformControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [ browserControl ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [ platformControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                <div className=\"components-form-token-field__help\">\n                                                    { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                                                        ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                                                        : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                                                </div>\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <FormTokenField\n                                                    multiple\n                                                    label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                    placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                    suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                    maxSuggestions={ 10 }\n                                                    value={\n                                                        getOptionTitles(\n                                                            !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                : [],\n                                                            this.getUserRoles()\n                                                        )\n                                                    }\n                                                    onChange={ ( value ) => {\n                                                        this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                    } }\n                                                    __experimentalExpandOnFocus\n                                                />\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.browser ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Browsers', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'browser', 'enabled' )\n                                            ? __( 'Choose in which browsers this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'browser', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'browser', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'browser', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'browser', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected browsers', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'browser', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select browsers', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getBrowsers() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    ? currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    : [],\n                                                                this.getBrowsers()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'browser', 'browsers', getOptionSlugs( value, this.getBrowsers() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different browser.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.platform ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Platforms', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'platform', 'enabled' )\n                                            ? __( 'Choose in which platforms this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'platform', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'platform', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'platform', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'platform', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected platforms', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'platform', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select platforms', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getPlatforms() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    ? currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    : [],\n                                                                this.getPlatforms()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'platform', 'platforms', getOptionSlugs( value, this.getPlatforms() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different platform.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { this.isPost() && (\n                                    // Placeholder message when Archive and Page controls not available in post edit\n                                    <Fragment>\n                                        <hr className=\"advgb-hr-separator\" />\n                                        <div className=\"components-form-token-field__help\">\n                                            { __( 'Term archives & Pages controls are available in Widgets and FSE screens.', 'advanced-gutenberg' ) }\n                                        </div>\n                                    </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}