{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./node_modules/hour-convert/index.js","webpack:///./src/assets/blocks/0-adv-components/datetime.jsx","webpack:///./src/assets/blocks/0-adv-components/utils.jsx","webpack:///./src/assets/blocks/block-controls/block-controls.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hasOwn","classNames","classes","arguments","length","arg","inner","argType","push","Array","isArray","apply","toString","includes","join","default","to12Hour","hour","meridiem","meridian","to24Hour","time","AdvDateTimeControl","props","togglePopup","setPopupState","state","useState","popupState","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","Fragment","className","Button","isLink","icon","onClick","Tooltip","text","__","moment","format","Popover","onClose","advgbBlocks","timezone","replace","DateTimePicker","currentDate","onChange","is12Hour","isInvalidDate","AdvDaysControl","days","slug","label","map","day","index","CheckboxControl","checked","AdvTimeControl","currentTime","onChangeTime","onTimeClear","AdvTimeClass","wp","components","ButtonGroup","TextControl","element","Component","i18n","this","onInit","setState","hours","split","minutes","parseInt","prevProps","prevState","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","isNaN","res","type","event","Math","max","min","Number","target","onKeyDown","placeholder","variant","getOptionSuggestions","options","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","find","undefined","getOptionSlugs","slugs_array","option_title","matching_slug","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","NON_SUPPORTED_BLOCKS","getGlobalControls","isControlEnabled","isAnyControlEnabledBlock","isAnyControlEnabledGlobal","currentControlKey","addFilter","sprintf","hasBlockSupport","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","SelectControl","createHigherOrderComponent","block_controls","advgb_block_controls_vars","controls","keys","control","controlAttrs","globalControls","counter","blockControls","forEach","some","itemIndex","findIndex","newArray","non_supported","Set","settings","attributes","advgbBlockControls","items","BlockEdit","taxonomies","terms","getTaxonomies","tax","allTaxonomies","term","user_roles","platforms","browsers","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","browserControl","platformControl","archiveControl","pageControl","pages","controlsAdded","controlExists","obj","topic","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","termOptions","el","result","currentTerms","changeControlKey","filter","modifyTaxLabels","apiFetch","path","url","addQueryArgs","ids","then","list","initArchive","updateTaxLabels","singular","taxModOptions","searchTermWord","search","from","a","data","select","getCurrentPostId","iniTaxLabels","isSelected","prevBlockControls","prevTermWord","isPost","archive","initArchiveControl","searchTerms","taxonomiesChanged","initialOpen","schedule","help","style","marginBottom","newDate","thisDate","Date","getTime","setHours","fromDate","status","isDismissible","newTime","user_role","multiple","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","browser","getBrowsers","platform","getPlatforms","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","BlockListBlock","advgbBcClass","hooks","blocks","compose"],"mappings":"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","file":"block-controls.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","import hourConvert from 'hour-convert';\n\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip } = wp.components;\nconst { Component, Fragment, useState } = wp.element;\nconst { __ } = wp.i18n;\n\nexport function AdvDateTimeControl(props) {\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ( state ) => ! state );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ () => setPopupState( togglePopup ) }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => setPopupState( togglePopup ) }\n        \t\t\t\t/>\n                    </label>\n                    <div className=\"advgb-advcalendar-popover-timezone\">\n                        { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                            ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                            : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                    </div>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n\nexport function AdvDaysControl(props) {\n    const days = [\n        { slug: 'su', label: __( 'S', 'advanced-gutenberg' ) },\n        { slug: 'm', label: __( 'M', 'advanced-gutenberg' ) },\n        { slug: 'tu', label: __( 'T', 'advanced-gutenberg' ) },\n        { slug: 'w', label: __( 'W', 'advanced-gutenberg' ) },\n        { slug: 'th', label: __( 'T', 'advanced-gutenberg' ) },\n        { slug: 'f', label: __( 'F', 'advanced-gutenberg' ) },\n        { slug: 'sa', label: __( 'S', 'advanced-gutenberg' ) }\n    ];\n\n    const {\n        label\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-checkbox-wrapper\">\n                <label>\n                    { label }\n                </label>\n                <div className=\"advgb-checkbox-inline\">\n                    { days.map( (day, index) => (\n                        <CheckboxControl\n                            key={ index }\n                            label={ day.label }\n                            checked={ true }\n                            //onChange={ (checked) => this.setCategories( cat.id, checked ) }\n                        />\n                    ) ) }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nclass AdvTimeClass extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            onChangeTime: null,\n            currentTime: this.props.currentTime || null,\n            hours: null,\n            minutes: null,\n            meridian: 'am',\n            onInit: true\n        };\n    }\n\n    componentWillMount() {\n        const { onChangeTime, currentTime, onInit } = this.state;\n\n        if( this.props.onChangeTime !== onChangeTime ) {\n            this.setState( {\n                onChangeTime: this.props.onChangeTime,\n            } );\n        }\n\n        if( this.props.currentTime !== currentTime ) {\n            this.setState( {\n                currentTime: this.props.currentTime,\n            } );\n        }\n\n        // Init\n        if( currentTime && currentTime.includes(':') && onInit ) {\n            this.setState( {\n                hours:      currentTime.split(':')[0],\n                minutes:    currentTime.split(':')[1],\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\n                onInit:     false\n            } );\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { onChangeTime, currentTime } = this.props;\n        const { hours, minutes, meridian } = this.state;\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\n\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\n\n            // When clearing time\n            if( ! hours && ! minutes ) {\n                return;\n            }\n\n            // Default minutes when hours selected\n            if( hours && ! minutes ) {\n                this.setState( {\n                    minutes: '00'\n                } );\n            }\n\n            // Default hours when minutes selected\n            if( minutes && ! hours ) {\n                this.setState( {\n                    hours: '01'\n                } );\n            }\n\n            /* Convert 12-hours to 24-hours.\n             * e.g. 12:00 AM becomes 00:00:00\n             *      12:00 PM becomes 12:00:00\n             *      01:00 PM becomes 13:00:00\n             */\n            const savedTime   = `${this.appendZero(\n                                    hourConvert.to24Hour( {\n                                        hour: parseInt( hours ),\n                                        meridiem: meridian\n                                    } )\n                                )}:${minutes}:00`;\n\n            // Value saved in source/attribute\n            this.props.onChangeTime( savedTime );\n        }\n    }\n\n    /**\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\n     *\n     * @since 3.1.2\n     *\n     * @param {string value Hours or minutes\n     *\n     * @return {string}\n     */\n    appendZero( value ) {\n        if( isNaN( value ) ) {\n            return;\n        }\n\n        const res = parseInt( value );\n\n        return res > 9 ? res : `0${res}`;\n    }\n\n    render() {\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\n\n        // Make sure hours are valid. 01: min, 12: max\n        const handleChangeHours = event => {\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\n            this.setState( {\n                hours: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for hours\n        const handleKeyDownHours = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 12 ) {\n                this.setState( {\n                    hours: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\n                this.setState( {\n                    hours: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        // Make sure minutes are valid. 01: min, 59: max\n        const handleChangeMinutes = event => {\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\n            this.setState( {\n                minutes: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for minutes\n        const handleKeyDownMinutes = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 59 ) {\n                this.setState( {\n                    minutes: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\n                this.setState( {\n                    minutes: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        return (\n            <Fragment>\n                <div className=\"advgb-advtime-control\">\n                    <label>\n                        { this.props.label }\n                    </label>\n                    <div className=\"advgb-advtime-hours-minutes\">\n                        <input\n                            type=\"text\"\n                            value={\n                                hours\n                                    ? this.appendZero(\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\n                                    ) : ''\n                            }\n                            onChange={ handleChangeHours }\n                            onKeyDown={ handleKeyDownHours }\n                            placeholder=\"--\"\n                        />\n                        <span>:</span>\n                        <input\n                            type=\"text\"\n                            value={\n                                minutes ? minutes : ''\n                            }\n                            onChange={ handleChangeMinutes }\n                            onKeyDown={ handleKeyDownMinutes }\n                            placeholder=\"--\"\n                        />\n                    </div>\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\n                        <Button\n                            variant={\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'am'\n                                } );\n                            } }\n                        >\n                            { __( 'AM', 'advanced-gutenberg' ) }\n                        </Button>\n                        <Button\n                            variant={\n                                meridian === 'pm' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'pm'\n                                } );\n                            } }\n                        >\n                            { __( 'PM', 'advanced-gutenberg' ) }\n                        </Button>\n                    </ButtonGroup>\n                    { hours && minutes &&\n        \t\t\t\t<Button\n                            className=\"advgb-advtime-remove-icon\"\n        \t\t\t\t\ticon=\"no-alt\"\n                            onClick={\n                                () => {\n                                    this.props.onTimeClear();\n                                    this.setState( {\n                                        hours: null,\n                                        minutes: null,\n                                        meridian: 'am'\n                                    } );\n                                }\n                            }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </Fragment>\n        )\n    }\n}\nexport default AdvTimeClass;\n\nexport function AdvTimeControl(props) {\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\n\n    return(\n        <AdvTimeClass\n            label={ label }\n            currentTime={ currentTime }\n            onChangeTime={ onChangeTime }\n            onTimeClear={ onTimeClear }\n        />\n    );\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get platforms\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPlatforms() {\n                return typeof advgb_block_controls_vars.platforms !== 'undefined'\n                        && advgb_block_controls_vars.platforms.length > 0\n                            ? advgb_block_controls_vars.platforms\n                            : [];\n            }\n\n            /**\n             * Get browsers\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getBrowsers() {\n                return typeof advgb_block_controls_vars.browsers !== 'undefined'\n                        && advgb_block_controls_vars.browsers.length > 0\n                            ? advgb_block_controls_vars.browsers\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const browserControl = {\n                    control: 'browser',\n                    enabled: true,\n                    browsers: [],\n                    approach: 'public'\n                };\n                const platformControl = {\n                    control: 'platform',\n                    enabled: true,\n                    platforms: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    browserControl\n                                ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    platformControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [ browserControl ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [ platformControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) || currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) && (\n                                                    <Fragment>\n                                                        <AdvDaysControl\n                                                            label={ __( 'On these days', 'advanced-gutenberg' ) }\n                                                        />\n                                                        <AdvTimeControl\n                                                            label={ __( 'From', 'advanced-gutenberg' ) }\n                                                            currentTime={\n                                                                !! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                                    ? currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                                    : null\n                                                            }\n                                                            onChangeTime={\n                                                                ( newTime ) => this.changeControlKey(\n                                                                    'schedule',\n                                                                    'timeFrom',\n                                                                    newTime\n                                                                )\n                                                            }\n                                                            onTimeClear={ () => this.changeControlKey( 'schedule', 'timeFrom', null ) }\n                                                        />\n                                                        <AdvTimeControl\n                                                            label={ __( 'To', 'advanced-gutenberg' ) }\n                                                            currentTime={\n                                                                currentControlKey( advgbBlockControls, 'schedule', 'timeTo' ) || null\n                                                            }\n                                                            onChangeTime={\n                                                                ( newTime ) => this.changeControlKey(\n                                                                    'schedule',\n                                                                    'timeTo',\n                                                                    newTime\n                                                                )\n                                                            }\n                                                            onTimeClear={ () => this.changeControlKey( 'schedule', 'timeTo', null ) }\n                                                        />\n                                                        { ( currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                            && '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                                advgbBlockControls, 'schedule', 'timeFrom'\n                                                            ) > '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                                advgbBlockControls, 'schedule', 'timeTo'\n                                                            )\n                                                        ) &&\n                                                            <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                            >\n                                                                { __( '\"To\" time should be after \"From\" time!', 'advanced-gutenberg' ) }\n                                                            </Notice>\n                                                        }\n                                                        { (\n                                                            ( currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                                && ! currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                            ) || ( ! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                                && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                            )\n                                                        ) &&\n                                                            <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                            >\n                                                                { __( 'Please choose \"From\" time and \"To\" time.', 'advanced-gutenberg' ) }\n                                                            </Notice>\n                                                        }\n                                                    </Fragment>\n                                                ) }\n                                                <Notice\n                                                    className=\"advgb-notice-sidebar\"\n                                                    status=\"info\"\n                                                    isDismissible={ false }\n                                                >\n                                                    { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                                                        ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                                                        : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                                                </Notice>\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.browser ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Browsers', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'browser', 'enabled' )\n                                            ? __( 'Choose in which browsers this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'browser', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'browser', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'browser', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'browser', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected browsers', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'browser', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select browsers', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getBrowsers() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    ? currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    : [],\n                                                                this.getBrowsers()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'browser', 'browsers', getOptionSlugs( value, this.getBrowsers() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different browser.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.platform ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Platforms', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'platform', 'enabled' )\n                                            ? __( 'Choose in which platforms this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'platform', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'platform', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'platform', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'platform', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected platforms', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'platform', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select platforms', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getPlatforms() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    ? currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    : [],\n                                                                this.getPlatforms()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'platform', 'platforms', getOptionSlugs( value, this.getPlatforms() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different platform.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { this.isPost() && (\n                                    // Placeholder message when Archive and Page controls not available in post edit\n                                    <Fragment>\n                                        <hr className=\"advgb-hr-separator\" />\n                                        <div className=\"components-form-token-field__help\">\n                                            { __( 'Term archives & Pages controls are available in Widgets and FSE screens.', 'advanced-gutenberg' ) }\n                                        </div>\n                                    </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}