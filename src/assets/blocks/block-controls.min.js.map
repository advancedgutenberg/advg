{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./node_modules/hour-convert/index.js","webpack:///./src/assets/blocks/0-adv-components/datetime.jsx","webpack:///./src/assets/blocks/0-adv-components/utils.jsx","webpack:///./src/assets/blocks/block-controls/block-controls.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hasOwn","classNames","classes","arguments","length","arg","inner","argType","push","Array","isArray","apply","toString","includes","join","default","to12Hour","hour","meridiem","meridian","to24Hour","time","AdvDateTimeControl","props","togglePopup","setPopupState","state","useState","popupState","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","Fragment","className","Button","isLink","icon","onClick","Tooltip","text","__","moment","format","Popover","onClose","advgbBlocks","timezone","replace","DateTimePicker","currentDate","onChange","is12Hour","isInvalidDate","AdvDaysControl","allDays","slug","label","days","onChangeDays","selectedDays","setSelectedDays","isDaySelected","some","el","map","day","CheckboxControl","checked","updatedDays","filter","findDay","find","uniqueDays","Set","onChangeDay","AdvTimeControl","currentTime","onChangeTime","onTimeClear","AdvTimeClass","wp","components","ButtonGroup","TextControl","element","Component","i18n","this","onInit","setState","hours","split","minutes","parseInt","prevProps","prevState","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","isNaN","res","type","event","Math","max","min","Number","target","onKeyDown","placeholder","variant","disabled","getOptionSuggestions","options","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","undefined","getOptionSlugs","slugs_array","option_title","matching_slug","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","NON_SUPPORTED_BLOCKS","getGlobalControls","isControlEnabled","isAnyControlEnabledBlock","isAnyControlEnabledGlobal","currentControlKey","addFilter","sprintf","hasBlockSupport","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","SelectControl","createHigherOrderComponent","block_controls","advgb_block_controls_vars","controls","keys","control","controlAttrs","globalControls","counter","blockControls","forEach","itemIndex","findIndex","newArray","non_supported","settings","attributes","advgbBlockControls","items","BlockEdit","taxonomies","terms","getTaxonomies","tax","allTaxonomies","term","user_roles","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","archiveControl","pageControl","pages","controlsAdded","controlExists","obj","topic","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","termOptions","result","currentTerms","changeControlKey","modifyTaxLabels","apiFetch","path","url","addQueryArgs","ids","then","list","initArchive","updateTaxLabels","singular","taxModOptions","index","searchTermWord","search","from","a","data","select","getCurrentPostId","iniTaxLabels","isSelected","prevBlockControls","prevTermWord","isPost","archive","initArchiveControl","searchTerms","taxonomiesChanged","initialOpen","schedule","help","style","marginBottom","newDate","thisDate","Date","getTime","setHours","fromDate","status","isDismissible","display","newTime","user_role","multiple","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","BlockListBlock","advgbBcClass","hooks","blocks","compose"],"mappings":"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","file":"block-controls.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","import hourConvert from 'hour-convert';\n\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip } = wp.components;\nconst { Component, Fragment, useState } = wp.element;\nconst { __ } = wp.i18n;\n\nexport function AdvDateTimeControl(props) {\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ( state ) => ! state );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ () => setPopupState( togglePopup ) }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => setPopupState( togglePopup ) }\n        \t\t\t\t/>\n                    </label>\n                    <div className=\"advgb-advcalendar-popover-timezone\">\n                        { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                            ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                            : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                    </div>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n\nexport function AdvDaysControl(props) {\n    const allDays = [\n        { slug: 0, label: __( 'S', 'advanced-gutenberg' ) }, // Sunday\n        { slug: 1, label: __( 'M', 'advanced-gutenberg' ) }, // Monday\n        { slug: 2, label: __( 'T', 'advanced-gutenberg' ) }, // Tuesday\n        { slug: 3, label: __( 'W', 'advanced-gutenberg' ) }, // Wednesday\n        { slug: 4, label: __( 'T', 'advanced-gutenberg' ) }, // Thursday\n        { slug: 5, label: __( 'F', 'advanced-gutenberg' ) }, // Friday\n        { slug: 6, label: __( 'S', 'advanced-gutenberg' ) }  // Saturday\n    ];\n\n    const {\n        label,\n        days,\n        onChangeDays\n    } = props;\n\n    // Use a single state variable to store the selected days\n    const [ selectedDays, setSelectedDays ] = useState( days );\n\n    /**\n    * Check if the day is selected or not\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {bool}\n    */\n    function isDaySelected( slug ) {\n        return selectedDays.some( el => el === slug );\n    }\n\n    /**\n    * Update the selected days state when a checkbox is changed\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {void}\n    */\n    function onChangeDay( slug ) {\n\n        // Check if the day is already selected\n        const isSelected = isDaySelected( slug );\n\n        // Create a new array with the updated selection\n        let updatedDays;\n        if ( isSelected ) {\n            // Remove the day from the selected days\n            updatedDays = selectedDays.filter( el => el !== slug );\n        } else {\n            // Add the day to the selected days\n            const findDay = allDays.find( el => el.slug === slug );\n            updatedDays = [ ...selectedDays, findDay.slug ];\n        }\n\n        // Remove duplicates\n        const uniqueDays = [ ...new Set( updatedDays ) ];\n\n        // Update the selected days state\n        setSelectedDays( uniqueDays );\n\n        // Call the onChangeDays prop to notify the parent component of the change\n        if ( onChangeDays ) {\n            onChangeDays( updatedDays );\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"advgb-checkbox-wrapper\">\n                <label>\n                    { label }\n                </label>\n                <div className=\"advgb-checkbox-inline\">\n                    { allDays.map( day => (\n                        <CheckboxControl\n                            label={ day.label }\n                            checked={ isDaySelected( day.slug ) }\n                            onChange={ () => onChangeDay( day.slug ) }\n                        />\n                    ) ) }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nclass AdvTimeClass extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            onChangeTime: null,\n            currentTime: this.props.currentTime || null,\n            hours: null,\n            minutes: null,\n            meridian: 'am',\n            onInit: true\n        };\n    }\n\n    componentWillMount() {\n        const { onChangeTime, currentTime, onInit } = this.state;\n\n        if( this.props.onChangeTime !== onChangeTime ) {\n            this.setState( {\n                onChangeTime: this.props.onChangeTime,\n            } );\n        }\n\n        if( this.props.currentTime !== currentTime ) {\n            this.setState( {\n                currentTime: this.props.currentTime,\n            } );\n        }\n\n        // Init\n        if( currentTime && currentTime.includes(':') && onInit ) {\n            this.setState( {\n                hours:      currentTime.split(':')[0],\n                minutes:    currentTime.split(':')[1],\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\n                onInit:     false\n            } );\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { onChangeTime, currentTime } = this.props;\n        const { hours, minutes, meridian } = this.state;\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\n\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\n\n            // When clearing time\n            if( ! hours && ! minutes ) {\n                return;\n            }\n\n            // Default minutes when hours selected\n            if( hours && ! minutes ) {\n                this.setState( {\n                    minutes: '00'\n                } );\n            }\n\n            // Default hours when minutes selected\n            if( minutes && ! hours ) {\n                this.setState( {\n                    hours: '01'\n                } );\n            }\n\n            /* Convert 12-hours to 24-hours.\n             * e.g. 12:00 AM becomes 00:00:00\n             *      12:00 PM becomes 12:00:00\n             *      01:00 PM becomes 13:00:00\n             */\n            const savedTime   = `${this.appendZero(\n                                    hourConvert.to24Hour( {\n                                        hour: parseInt( hours ),\n                                        meridiem: meridian\n                                    } )\n                                )}:${minutes}:00`;\n\n            // Value saved in source/attribute\n            this.props.onChangeTime( savedTime );\n        }\n    }\n\n    /**\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\n     *\n     * @since 3.1.2\n     *\n     * @param {string value Hours or minutes\n     *\n     * @return {string}\n     */\n    appendZero( value ) {\n        if( isNaN( value ) ) {\n            return;\n        }\n\n        const res = parseInt( value );\n\n        return res > 9 ? res : `0${res}`;\n    }\n\n    render() {\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\n\n        // Make sure hours are valid. 01: min, 12: max\n        const handleChangeHours = event => {\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\n            this.setState( {\n                hours: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for hours\n        const handleKeyDownHours = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 12 ) {\n                this.setState( {\n                    hours: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\n                this.setState( {\n                    hours: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        // Make sure minutes are valid. 01: min, 59: max\n        const handleChangeMinutes = event => {\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\n            this.setState( {\n                minutes: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for minutes\n        const handleKeyDownMinutes = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 59 ) {\n                this.setState( {\n                    minutes: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\n                this.setState( {\n                    minutes: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        return (\n            <Fragment>\n                <div className=\"advgb-advtime-control\">\n                    <label>\n                        { this.props.label }\n                    </label>\n                    <div className=\"advgb-advtime-hours-minutes\">\n                        <input\n                            type=\"text\"\n                            value={\n                                hours\n                                    ? this.appendZero(\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\n                                    ) : ''\n                            }\n                            onChange={ handleChangeHours }\n                            onKeyDown={ handleKeyDownHours }\n                            placeholder=\"--\"\n                        />\n                        <span>:</span>\n                        <input\n                            type=\"text\"\n                            value={\n                                minutes ? minutes : ''\n                            }\n                            onChange={ handleChangeMinutes }\n                            onKeyDown={ handleKeyDownMinutes }\n                            placeholder=\"--\"\n                        />\n                    </div>\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\n                        <Button\n                            variant={\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'am'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'AM', 'advanced-gutenberg' ) }\n                        </Button>\n                        <Button\n                            variant={\n                                meridian === 'pm' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'pm'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'PM', 'advanced-gutenberg' ) }\n                        </Button>\n                    </ButtonGroup>\n                    { hours && minutes &&\n        \t\t\t\t<Button\n                            className=\"advgb-advtime-remove-icon\"\n        \t\t\t\t\ticon=\"no-alt\"\n                            onClick={\n                                () => {\n                                    this.props.onTimeClear();\n                                    this.setState( {\n                                        hours: null,\n                                        minutes: null,\n                                        meridian: 'am'\n                                    } );\n                                }\n                            }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </Fragment>\n        )\n    }\n}\nexport default AdvTimeClass;\n\nexport function AdvTimeControl(props) {\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\n\n    return(\n        <AdvTimeClass\n            label={ label }\n            currentTime={ currentTime }\n            onChangeTime={ onChangeTime }\n            onTimeClear={ onTimeClear }\n        />\n    );\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                                <AdvDaysControl\n                                                    label={ __( 'On these days (optional)', 'advanced-gutenberg' ) }\n                                                    days={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            : []\n                                                    }\n                                                    onChangeDays={ ( value ) => this.changeControlKey( 'schedule', 'days', value ) }\n                                                />\n                                                <label style={ { marginBottom: 8, display: 'block' } }>\n                                                    { __( 'Between these times (optional)', 'advanced-gutenberg' ) }\n                                                </label>\n                                                <AdvTimeControl\n                                                    label={ __( 'From', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            : null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeFrom',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeFrom', null ) }\n                                                />\n                                                <AdvTimeControl\n                                                    label={ __( 'To', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeTo' ) || null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeTo',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeTo', null ) }\n                                                />\n                                                { (\n                                                    currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                    && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    && (\n                                                        '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeFrom'\n                                                        ) >= '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeTo'\n                                                        )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"To\" time should be after \"From\" time!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { (\n                                                    (\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && ! currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    ) || (\n                                                        ! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( 'Please choose \"From\" time and \"To\" time.', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n\n                                                <Notice\n                                                    className=\"advgb-notice-sidebar\"\n                                                    status=\"info\"\n                                                    isDismissible={ false }\n                                                >\n                                                    { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                                                        ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                                                        : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                                                </Notice>\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'hidden',\n                                                            label: __( 'Hide from everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { this.isPost() && (\n                                    // Placeholder message when Archive and Page controls not available in post edit\n                                    <Fragment>\n                                        <hr className=\"advgb-hr-separator\" />\n                                        <div>\n                                            { __( 'Term archives & Pages controls are available in Widgets and FSE screens.', 'advanced-gutenberg' ) }\n                                        </div>\n                                    </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}