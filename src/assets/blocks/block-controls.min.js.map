{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./src/assets/blocks/0-adv-components/datetime.jsx","webpack:///./src/assets/blocks/0-adv-components/utils.jsx","webpack:///./src/assets/blocks/block-controls/block-controls.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hasOwn","classNames","classes","arguments","length","arg","inner","argType","push","Array","isArray","apply","toString","join","default","AdvDateTimeControl","props","togglePopup","setPopupState","state","wp","components","Button","DateTimePicker","Popover","Tooltip","element","Fragment","useState","__","i18n","popupState","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","className","isLink","icon","onClick","text","moment","format","onClose","advgbBlocks","timezone","replace","currentDate","onChange","is12Hour","isInvalidDate","getOptionSuggestions","options","map","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","find","slug","undefined","getOptionSlugs","slugs_array","option_title","matching_slug","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","NON_SUPPORTED_BLOCKS","getGlobalControls","isControlEnabled","isAnyControlEnabledBlock","isAnyControlEnabledGlobal","currentControlKey","addFilter","sprintf","hasBlockSupport","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","SelectControl","createHigherOrderComponent","Component","parseInt","block_controls","advgb_block_controls_vars","controls","keys","control","controlAttrs","globalControls","counter","blockControls","forEach","some","itemIndex","findIndex","newArray","non_supported","Set","settings","includes","attributes","advgbBlockControls","type","items","BlockEdit","taxonomies","terms","this","getTaxonomies","tax","allTaxonomies","term","user_roles","platforms","browsers","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","browserControl","platformControl","archiveControl","pageControl","pages","controlsAdded","controlExists","obj","topic","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","termOptions","el","result","currentTerms","changeControlKey","setState","filter","modifyTaxLabels","apiFetch","path","url","addQueryArgs","ids","then","list","initArchive","updateTaxLabels","singular","taxModOptions","index","searchTermWord","search","from","a","data","select","getCurrentPostId","iniTaxLabels","prevProps","prevState","isSelected","prevBlockControls","prevTermWord","isPost","archive","initArchiveControl","searchTerms","taxonomiesChanged","initialOpen","schedule","label","help","checked","style","marginBottom","newDate","thisDate","Date","getTime","setHours","fromDate","status","isDismissible","user_role","multiple","placeholder","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","browser","getBrowsers","platform","getPlatforms","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","BlockListBlock","advgbBcClass","hooks","blocks","compose"],"mappings":"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","file":"block-controls.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export function AdvDateTimeControl(props) {\n    const { Button, DateTimePicker,  Popover, Tooltip } = wp.components;\n    const { Fragment, useState } = wp.element;\n    const { __ } = wp.i18n;\n\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ( state ) => ! state );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ () => setPopupState( togglePopup ) }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => setPopupState( togglePopup ) }\n        \t\t\t\t/>\n                    </label>\n                    <div className=\"advgb-advcalendar-popover-timezone\">\n                        { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                            ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                            : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                    </div>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get platforms\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPlatforms() {\n                return typeof advgb_block_controls_vars.platforms !== 'undefined'\n                        && advgb_block_controls_vars.platforms.length > 0\n                            ? advgb_block_controls_vars.platforms\n                            : [];\n            }\n\n            /**\n             * Get browsers\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getBrowsers() {\n                return typeof advgb_block_controls_vars.browsers !== 'undefined'\n                        && advgb_block_controls_vars.browsers.length > 0\n                            ? advgb_block_controls_vars.browsers\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const browserControl = {\n                    control: 'browser',\n                    enabled: true,\n                    browsers: [],\n                    approach: 'public'\n                };\n                const platformControl = {\n                    control: 'platform',\n                    enabled: true,\n                    platforms: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    browserControl\n                                ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    platformControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [ browserControl ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [ platformControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                <div className=\"components-form-token-field__help\">\n                                                    { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                                                        ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                                                        : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                                                </div>\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.browser ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Browsers', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'browser', 'enabled' )\n                                            ? __( 'Choose in which browsers this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'browser', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'browser', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'browser', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'browser', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected browsers', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'browser', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select browsers', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getBrowsers() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    ? currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    : [],\n                                                                this.getBrowsers()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'browser', 'browsers', getOptionSlugs( value, this.getBrowsers() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different browser.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.platform ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Platforms', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'platform', 'enabled' )\n                                            ? __( 'Choose in which platforms this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'platform', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'platform', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'platform', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'platform', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected platforms', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'platform', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select platforms', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getPlatforms() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    ? currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    : [],\n                                                                this.getPlatforms()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'platform', 'platforms', getOptionSlugs( value, this.getPlatforms() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different platform.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { this.isPost() && (\n                                    // Placeholder message when Archive and Page controls not available in post edit\n                                    <Fragment>\n                                        <hr className=\"advgb-hr-separator\" />\n                                        <div className=\"components-form-token-field__help\">\n                                            { __( 'Term archives & Pages controls are available in Widgets and FSE screens.', 'advanced-gutenberg' ) }\n                                        </div>\n                                    </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}