{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/classnames/index.js","webpack:///./src/assets/blocks/0-adv-components/datetime.jsx","webpack:///./src/assets/blocks/0-adv-components/utils.jsx","webpack:///./src/assets/blocks/block-controls/block-controls.jsx"],"names":["AdvDateTimeControl","wp","togglePopup","setPopupState","__","date","moment","popupState","advgbBlocks","getOptionSuggestions","item","getOptionTitles","field_value","options","find_option","getOptionSlugs","slugs_array","slugs","matching_slug","wpBlockEditor","parseInt","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","Object","isControlEnabled","isAnyControlEnabledBlock","globalControls","counter","blockControls","currentControlKey","isAnyControlEnabledGlobal","controlsAdded","controlAttrs","controlExists","element","itemIndex","newArray","obj","addFilter","settings","advgbBlockControls","type","items","default","withEditControls","taxModOptions","termOptions","searchTermWord","allTaxonomies","terms","taxonomies","term","slug","title","value","scheduleControl","control","dateFrom","dateTo","recurring","userRoleControl","roles","approach","browserControl","browsers","platformControl","platforms","archiveControl","pageControl","pages","setAttributes","taxArray","controlIndex","topic","taxIndex","all","option","el","result","currentTerms","path","ids","updateTaxLabels","sprintf","singular","tax","a","prevProps","marginBottom","thisDate","fromDate","label","withAttributes","props","hasBlockSupport","advgbBcClass"],"mappings":"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","file":"block-controls.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export function AdvDateTimeControl(props) {\n    const { Button, DateTimePicker,  Popover, Tooltip } = wp.components;\n    const { Fragment, useState } = wp.element;\n    const { __ } = wp.i18n;\n\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ( state ) => ! state );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ () => setPopupState( togglePopup ) }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => setPopupState( togglePopup ) }\n        \t\t\t\t/>\n                    </label>\n                    <div className=\"advgb-advcalendar-popover-timezone\">\n                        { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                            ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                            : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                    </div>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(...props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get platforms\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPlatforms() {\n                return typeof advgb_block_controls_vars.platforms !== 'undefined'\n                        && advgb_block_controls_vars.platforms.length > 0\n                            ? advgb_block_controls_vars.platforms\n                            : [];\n            }\n\n            /**\n             * Get browsers\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getBrowsers() {\n                return typeof advgb_block_controls_vars.browsers !== 'undefined'\n                        && advgb_block_controls_vars.browsers.length > 0\n                            ? advgb_block_controls_vars.browsers\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const browserControl = {\n                    control: 'browser',\n                    enabled: true,\n                    browsers: [],\n                    approach: 'public'\n                };\n                const platformControl = {\n                    control: 'platform',\n                    enabled: true,\n                    platforms: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    browserControl\n                                ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    platformControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'browser':\n                            setAttributes( {\n                                advgbBlockControls: [ browserControl ]\n                            } );\n                        break;\n\n                        case 'platform':\n                            setAttributes( {\n                                advgbBlockControls: [ platformControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                <div className=\"components-form-token-field__help\">\n                                                    { typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                                                        ? `${advgbBlocks.timezone.replace(/_/g, ' ')} ${__( 'time', 'advanced-gutenberg' )}`\n                                                        : __( 'WordPress settings timezone', 'advanced-gutenberg' ) }\n                                                </div>\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.browser ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Browsers', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'browser', 'enabled' )\n                                            ? __( 'Choose in which browsers this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'browser', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'browser', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'browser', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'browser', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected browsers', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected browsers', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'browser', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'browser', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select browsers', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getBrowsers() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    ? currentControlKey( advgbBlockControls, 'browser', 'browsers' )\n                                                                    : [],\n                                                                this.getBrowsers()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'browser', 'browsers', getOptionSlugs( value, this.getBrowsers() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different browser.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.platform ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Platforms', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'platform', 'enabled' )\n                                            ? __( 'Choose in which platforms this block can be displayed.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'platform', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'platform', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'platform', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'platform', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show in all platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show in the selected platforms', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide in the selected platforms', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'platform', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'platform', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select platforms', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getPlatforms() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    ? currentControlKey( advgbBlockControls, 'platform', 'platforms' )\n                                                                    : [],\n                                                                this.getPlatforms()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'platform', 'platforms', getOptionSlugs( value, this.getPlatforms() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                    {\n                                                        __(\n                                                            'Please note the result could not be 100% accurate due some browsers can mimic a different platform.',\n                                                            'advanced-gutenberg'\n                                                        )\n                                                    }\n                                                    </Notice>\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { this.isPost() && (\n                                    // Placeholder message when Archive and Page controls not available in post edit\n                                    <Fragment>\n                                        <hr className=\"advgb-hr-separator\" />\n                                        <div className=\"components-form-token-field__help\">\n                                            { __( 'Term archives & Pages controls are available in Widgets and FSE screens.', 'advanced-gutenberg' ) }\n                                        </div>\n                                    </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}