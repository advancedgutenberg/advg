{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/assets/blocks/editor-sidebar/post-sidebar.jsx"],"names":["wp","sidebarName","sidebarTitle","__","sidebarIcon","VISUAL_GUIDE_SETTINGS","label","value","EDITOR_WIDTH_SETTINGS","updateBodyClass","postMetaData","select","bodyClass","window","advg_settings","meta","updateMetaField","setting","advgb_blocks_editor_width","advgbBlocks","advgb_blocks_columns_visual_guide","AdvSidebarRender","dispatch","metaValues","columnsVisualGuide","editorWidth","registerPlugin","render"],"mappings":"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","file":"post-sidebar.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","(function ( wpI18n, wpPlugins, wpElement, wpData, wpComponents, wpEditPost ) {\n    const { __ } = wpI18n;\n    const { registerPlugin } = wpPlugins;\n    const { Component, Fragment } = wpElement;\n    const { select, withSelect, withDispatch } = wpData;\n    const { PanelBody, ButtonGroup, Button } = wpComponents;\n    const { PluginSidebar, PluginSidebarMoreMenuItem } = wpEditPost;\n    const { compose } = wp.compose;\n\n    const sidebarName  = \"advgb-editor-sidebar\";\n    const sidebarTitle = __( 'PublishPress Blocks Settings', 'advanced-gutenberg' );\n    const sidebarIcon  = \"layout\";\n    const VISUAL_GUIDE_SETTINGS = [\n        { label: __( 'Inherit from global settings', 'advanced-gutenberg' ), value: '' },\n        { label: __( 'Enable', 'advanced-gutenberg' ), value: 'enable' },\n        { label: __( 'Disable', 'advanced-gutenberg' ), value: 'disable' },\n    ];\n    const EDITOR_WIDTH_SETTINGS = [\n        { label: __( 'Inherit from global settings', 'advanced-gutenberg' ), value: '' },\n        { label: __( 'Original', 'advanced-gutenberg' ), value: 'default' },\n        { label: __( 'Large', 'advanced-gutenberg' ), value: 'large' },\n        { label: __( 'Full width', 'advanced-gutenberg' ), value: 'full' },\n    ];\n\n    const updateBodyClass = function () {\n        const postMetaData = select( 'core/editor' ).getEditedPostAttribute( 'meta' );\n        if (!postMetaData) return null;\n        const { advgb_blocks_editor_width, advgb_blocks_columns_visual_guide } = postMetaData;\n        const bodyClass = window.document.body.classList;\n\n        bodyClass.remove(\n            'advgb-editor-width-default',\n            'advgb-editor-width-large',\n            'advgb-editor-width-full',\n            'advgb-editor-col-guide-enable',\n            'advgb-editor-col-guide-disable',\n        );\n\n        // Editor width\n        if (!!advgb_blocks_editor_width) {\n            bodyClass.add( 'advgb-editor-width-' + advgb_blocks_editor_width );\n        } else {\n            // Global\n            bodyClass.add( 'advgb-editor-width-' + advg_settings.editor_width_global );\n        }\n\n        // Columns visual guide\n        if (!!advgb_blocks_columns_visual_guide) {\n            bodyClass.add( 'advgb-editor-col-guide-' + advgb_blocks_columns_visual_guide );\n        } else {\n            // Global\n            bodyClass.add( 'advgb-editor-col-guide-' + advg_settings.enable_columns_visual_guide_global );\n        }\n    };\n\n    // Line below stopped working - https://github.com/WordPress/gutenberg/issues/28032#issuecomment-759723289\n    // window.document.addEventListener(\"DOMContentLoaded\", updateBodyClass);\n\n    class AdvSidebar extends Component {\n        constructor() {\n            super( ...arguments );\n        }\n\n        onUpdateMeta( metaData ) {\n            const { metaValues, updateMetaField } = this.props;\n            const meta = { ...metaValues, ...metaData };\n\n            updateMetaField( meta );\n            updateBodyClass();\n        }\n\n        render() {\n            const { columnsVisualGuide, editorWidth } = this.props;\n\n            return (\n                <Fragment>\n                    <div className=\"advgb-editor-sidebar-note\">\n                        { __( 'These settings will override the PublishPress Blocks global settings.', 'advanced-gutenberg' ) }\n                    </div>\n                    <PanelBody title={ __( 'Editor width', 'advanced-gutenberg' ) }>\n                        <div className=\"advgb-editor-sidebar-note\">\n                            { __( 'Change your editor width', 'advanced-gutenberg' ) }\n                        </div>\n                        <ButtonGroup className=\"advgb-button-group\">\n                            {EDITOR_WIDTH_SETTINGS.map((setting, index) => (\n                                <Button className=\"advgb-button\"\n                                        key={ index }\n                                        isSecondary={ setting.value !== editorWidth }\n                                        isPrimary={ setting.value === editorWidth }\n                                        onClick={ () => this.onUpdateMeta( { advgb_blocks_editor_width: setting.value } ) }\n                                >\n                                    { setting.label }\n                                </Button>\n                            ) ) }\n                        </ButtonGroup>\n                    </PanelBody>\n                    { advgbBlocks.enable_advgb_blocks !== undefined && advgbBlocks.enable_advgb_blocks === '1' &&\n                        <PanelBody title={ __( 'Columns Visual Guide', 'advanced-gutenberg' ) } initialOpen={ false }>\n                            <div className=\"advgb-editor-sidebar-note\">\n                                { __( 'Border to materialize PublishPress Blocks Column block', 'advanced-gutenberg' ) }\n                            </div>\n                            <ButtonGroup className=\"advgb-button-group\">\n                                {VISUAL_GUIDE_SETTINGS.map((setting, index) => (\n                                    <Button className=\"advgb-button\"\n                                            key={ index }\n                                            isSecondary={ setting.value !== columnsVisualGuide }\n                                            isPrimary={ setting.value === columnsVisualGuide }\n                                            onClick={ () => this.onUpdateMeta( { advgb_blocks_columns_visual_guide: setting.value } ) }\n                                    >\n                                        { setting.label }\n                                    </Button>\n                                ) ) }\n                            </ButtonGroup>\n                        </PanelBody>\n                    }\n                </Fragment>\n            )\n        }\n    }\n\n    const AdvSidebarRender = compose(\n        withDispatch( ( dispatch ) => {\n            return {\n                updateMetaField: ( data ) => {\n                    dispatch( 'core/editor' ).editPost(\n                        { meta: data }\n                    );\n                },\n            }\n        } ),\n        withSelect( ( select ) => {\n            const metaValues = select( 'core/editor' ).getEditedPostAttribute( 'meta' );\n\n            return {\n                metaValues: metaValues,\n                columnsVisualGuide: metaValues.advgb_blocks_columns_visual_guide,\n                editorWidth: metaValues.advgb_blocks_editor_width,\n            }\n        } )\n    )( AdvSidebar );\n\n    registerPlugin( 'advgb-editor-sidebar', {\n        render: function () {\n            return (\n                <Fragment>\n                    <PluginSidebarMoreMenuItem\n                        target={ sidebarName }\n                        icon={ sidebarIcon }\n                    >\n                        { sidebarTitle }\n                    </PluginSidebarMoreMenuItem>\n                    <PluginSidebar\n                        name={ sidebarName }\n                        title={ sidebarTitle }\n                        icon={ sidebarIcon }\n                    >\n                        <div className=\"advgb-editor-sidebar-content\">\n                            <AdvSidebarRender />\n                        </div>\n                    </PluginSidebar>\n                </Fragment>\n            )\n        }\n    } );\n})( wp.i18n, wp.plugins, wp.element, wp.data, wp.components, wp.editPost );\n"],"sourceRoot":""}