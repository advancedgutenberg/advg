{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/hour-convert/index.js","webpack:///./node_modules/classnames/index.js","webpack:///./assets/blocks/0-adv-components/datetime.jsx","webpack:///./assets/blocks/0-adv-components/utils.jsx","webpack:///./assets/blocks/block-controls/block-controls.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","to12Hour","hour","meridiem","meridian","to24Hour","time","hasOwn","classNames","classes","arguments","length","arg","appendClass","parseValue","Array","isArray","apply","toString","includes","newClass","default","_wp$components","wp","components","ButtonGroup","Button","DateTimePicker","CheckboxControl","TextControl","Popover","Tooltip","SelectControl","Icon","_wp$element","element","Component","Fragment","useState","_wp$i18n","i18n","__","_x","applyFilters","hooks","AdvDateTimeControl","props","_useState2","_slicedToArray","popupState","setPopupState","togglePopup","buttonLabel","dateLabel","date","onChangeDate","onDateClear","onInvalidDate","placement","offset","React","createElement","className","isLink","icon","onClick","text","moment","format","onClose","resize","currentDate","onChange","is12Hour","isInvalidDate","AdvDaysControl","allDays","slug","label","days","onChangeDays","_useState4","selectedDays","setSelectedDays","isDaySelected","some","el","map","day","checked","updatedDays","filter","findDay","find","concat","_toConsumableArray","uniqueDays","Set","onChangeDay","defaultProps","AdvTimeClass","_Component","_this","_classCallCheck","_callSuper","state","onChangeTime","currentTime","hours","minutes","onInit","_inherits","_this$state","this","setState","split","parseInt","prevProps","prevState","_this$props","_this$state2","prevHours","prevMinutes","prevMeridian","savedTime","appendZero","hourConvert","isNaN","res","_this2","_this$state3","type","event","Math","max","min","Number","target","onKeyDown","placeholder","variant","disabled","onTimeClear","AdvTimeControl","AdvTimezoneControl","defaultTimezone","style","marginTop","marginBottom","float","marginRight","href","class","options","getOptionSuggestions","item","title","getOptionTitles","slugs","field_value","option_slug","find_option","undefined","getOptionSlugs","slugs_array","option_title","matching_slug","push","wpI18n","wpHooks","wpBlocks","wpBlockEditor","wpComponents","wpCompose","wpElement","blockEditor","editor","addFilter","sprintf","hasBlockSupport","_wpBlockEditor","InspectorControls","ToggleControl","BlockControls","PanelBody","Notice","FormTokenField","createHigherOrderComponent","advgbBlocks","block_controls","NON_SUPPORTED_BLOCKS","getGlobalControls","advgb_block_controls_vars","controls","keys","isControlEnabled","control","isAnyControlEnabledBlock","controlAttrs","globalControls","counter","blockControls","forEach","currentControlKey","isAnyControlEnabledGlobal","itemIndex","findIndex","non_supported","settings","attributes","_extends","advgbBlockControls","items","BlockEdit","BlockControlsEdit","taxModOptions","termOptions","searchTermWord","initArchive","updateTaxLabels","isPost","taxonomies","terms","getTaxonomies","tax","allTaxonomies","term","user_roles","_this3","page","setAttributes","scheduleControl","enabled","dateFrom","dateTo","recurring","userRoleControl","roles","approach","archiveControl","pageControl","pages","controlsAdded","controlExists","newArray","obj","_objectSpread","_defineProperty","topic","_this4","_this$props2","taxArray","controlIndex","taxIndex","all","currentArchiveControl","option","_this$props3","result","_this5","currentTerms","changeControlKey","modifyTaxLabels","_this6","apiFetch","path","url","addQueryArgs","ids","then","list","singular","index","_this7","search","from","a","data","select","getCurrentPostId","timezone","replace","iniTaxLabels","_this$props4","isSelected","prevBlockControls","prevTermWord","archive","initArchiveControl","searchTerms","taxonomiesChanged","_this8","_this$props5","initialOpen","schedule","help","newDate","thisDate","Date","getTime","setHours","fromDate","status","isDismissible","display","newTime","getTimezoneLabel","getTimezoneSlug","onChangeTimezone","user_role","multiple","suggestions","getUserRoles","maxSuggestions","__experimentalExpandOnFocus","changeArchiveControl","onInputChange","__experimentalShowHowTo","getPages","BlockListBlock","advgbBcClass","classnames","blocks","compose"],"mappings":"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","file":"block-controls.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","'use strict';\n\nmodule.exports = {\n\n    /**\n     * Convert 24-hour time to 12-hour format.\n     *\n     * @param {number} hour Hour to convert (0-23)\n     * @return {object} { hour, meridiem } (meridian is also returned for backwards compatibility)\n     */\n    to12Hour: function to12Hour(hour) {\n        var meridiem = hour < 12 ? 'am' : 'pm';\n        return {\n            hour: ((hour + 11) % 12 + 1),\n            meridiem: meridiem,\n            meridian: meridiem\n        };\n    },\n\n    /**\n     * Convert 12-hour time to 24-hour format.\n     *\n     * @param {object} time Time object\n     * @param {number} time.hour Hour to convert (1-12)\n     * @param {string} time.meridiem Hour meridiem (am/pm). 'time.meridian' is\n     *  supported for backwards compatibility.\n     * @return {number}\n     */\n    to24Hour: function to24Hour(time) {\n        var meridiem = time.meridiem || time.meridian;\n        return (meridiem === 'am' ? 0 : 12) + (time.hour % 12);\n    }\n};\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","import hourConvert from 'hour-convert';\n\nconst { ButtonGroup, Button, DateTimePicker, TextControl, CheckboxControl, Popover, Tooltip, SelectControl, Icon } = wp.components;\nconst { Component, Fragment, useState } = wp.element;\nconst { __, _x } = wp.i18n;\nconst { applyFilters } = wp.hooks;\n\nexport function AdvDateTimeControl(props) {\n    const [popupState, setPopupState] = useState( false );\n    const togglePopup = () => {\n        setPopupState( ! popupState );\n    };\n\n    const {\n        buttonLabel,\n        dateLabel,\n        date,\n        onChangeDate,\n        onDateClear,\n        onInvalidDate,\n        placement,\n        offset\n    } = props;\n\n    return (\n        <Fragment>\n            <div className=\"advgb-advcalendar-control\">\n                <label>\n                    { dateLabel }\n                </label>\n                <div>\n                    <Button\n                        isLink\n                        icon=\"calendar\"\n                        onClick={ togglePopup }\n                    >\n                        <Tooltip text={ __( 'Change date', 'advanced-gutenberg' ) }>\n                            <span>\n                                { date ? moment( date ).format( \"MMMM DD YYYY, h:mm a\" ) : buttonLabel }\n                            </span>\n                        </Tooltip>\n                    </Button>\n                    { date &&\n        \t\t\t\t<Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ () => onDateClear() }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </div>\n            { popupState &&\n                <Popover\n                    className=\"advgb-advcalendar-popover\"\n                    onClose={ setPopupState.bind( null, false ) }\n                    resize={ false }\n                    placement={ placement }\n                    offset={ offset }\n                >\n                    <label className=\"advgb-advcalendar-popover-label\">\n                        { dateLabel }\n                        <Button\n        \t\t\t\t\ticon=\"no-alt\"\n                            className=\"advgb-advcalendar-remove-icon\"\n        \t\t\t\t\tonClick={ togglePopup }\n        \t\t\t\t/>\n                    </label>\n                    <DateTimePicker\n                        currentDate={ date }\n                        onChange={ onChangeDate }\n                        is12Hour={ true }\n                        isInvalidDate={ onInvalidDate }\n                    />\n                </Popover>\n            }\n        </Fragment>\n\n    )\n}\n\nAdvDateTimeControl.defaultProps = {\n    placement: 'left',\n    offset: 40\n}\n\nexport function AdvDaysControl(props) {\n    const allDays = [\n        { slug: 0, label: _x( 'S', 'Sunday first letter', 'advanced-gutenberg' ) }, // Sunday\n        { slug: 1, label: __( 'M', 'advanced-gutenberg' ) }, // Monday\n        { slug: 2, label: _x( 'T', 'Tuesday first letter', 'advanced-gutenberg' ) }, // Tuesday\n        { slug: 3, label: __( 'W', 'advanced-gutenberg' ) }, // Wednesday\n        { slug: 4, label: _x( 'T', 'Thursday first letter', 'advanced-gutenberg' ) }, // Thursday\n        { slug: 5, label: __( 'F', 'advanced-gutenberg' ) }, // Friday\n        { slug: 6, label: _x( 'S', 'Saturday first letter', 'advanced-gutenberg' ) }  // Saturday\n    ];\n\n    const {\n        label,\n        days,\n        onChangeDays\n    } = props;\n\n    // Use a single state variable to store the selected days\n    const [ selectedDays, setSelectedDays ] = useState( days );\n\n    /**\n    * Check if the day is selected or not\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {bool}\n    */\n    function isDaySelected( slug ) {\n        return selectedDays.some( el => el === slug );\n    }\n\n    /**\n    * Update the selected days state when a checkbox is changed\n    *\n    * @since 3.1.2\n    *\n    * @param {string} Day slug e.g. 'u' for Sunday, 't' for Tuesday\n    *\n    * @return {void}\n    */\n    function onChangeDay( slug ) {\n\n        // Check if the day is already selected\n        const isSelected = isDaySelected( slug );\n\n        // Create a new array with the updated selection\n        let updatedDays;\n        if ( isSelected ) {\n            // Remove the day from the selected days\n            updatedDays = selectedDays.filter( el => el !== slug );\n        } else {\n            // Add the day to the selected days\n            const findDay = allDays.find( el => el.slug === slug );\n            updatedDays = [ ...selectedDays, findDay.slug ];\n        }\n\n        // Remove duplicates\n        const uniqueDays = [ ...new Set( updatedDays ) ];\n\n        // Update the selected days state\n        setSelectedDays( uniqueDays );\n\n        // Call the onChangeDays prop to notify the parent component of the change\n        if ( onChangeDays ) {\n            onChangeDays( updatedDays );\n        }\n    }\n\n    return (\n        <Fragment>\n            <div className=\"advgb-checkbox-wrapper\">\n                <label>\n                    { label }\n                </label>\n                <div className=\"advgb-checkbox-inline\">\n                    { allDays.map( day => (\n                        <CheckboxControl\n                            label={ day.label }\n                            checked={ isDaySelected( day.slug ) }\n                            onChange={ () => onChangeDay( day.slug ) }\n                        />\n                    ) ) }\n                </div>\n            </div>\n        </Fragment>\n    )\n}\n\nclass AdvTimeClass extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            onChangeTime: null,\n            currentTime: this.props.currentTime || null,\n            hours: null,\n            minutes: null,\n            meridian: 'am',\n            onInit: true\n        };\n    }\n\n    componentWillMount() {\n        const { onChangeTime, currentTime, onInit } = this.state;\n\n        if( this.props.onChangeTime !== onChangeTime ) {\n            this.setState( {\n                onChangeTime: this.props.onChangeTime,\n            } );\n        }\n\n        if( this.props.currentTime !== currentTime ) {\n            this.setState( {\n                currentTime: this.props.currentTime,\n            } );\n        }\n\n        // Init\n        if( currentTime && currentTime.includes(':') && onInit ) {\n            this.setState( {\n                hours:      currentTime.split(':')[0],\n                minutes:    currentTime.split(':')[1],\n                meridian:   parseInt( currentTime.split(':')[0] ) > 11 ? 'pm' : 'am', // We set > 11 because PM starts from 12:00:00\n                onInit:     false\n            } );\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { onChangeTime, currentTime } = this.props;\n        const { hours, minutes, meridian } = this.state;\n        const { hours: prevHours, minutes: prevMinutes, meridian: prevMeridian } = prevState;\n\n        if( hours !== prevHours || minutes !== prevMinutes || meridian !== prevMeridian ) {\n\n            // When clearing time\n            if( ! hours && ! minutes ) {\n                return;\n            }\n\n            // Default minutes when hours selected\n            if( hours && ! minutes ) {\n                this.setState( {\n                    minutes: '00'\n                } );\n            }\n\n            // Default hours when minutes selected\n            if( minutes && ! hours ) {\n                this.setState( {\n                    hours: '01'\n                } );\n            }\n\n            /* Convert 12-hours to 24-hours.\n             * e.g. 12:00 AM becomes 00:00:00\n             *      12:00 PM becomes 12:00:00\n             *      01:00 PM becomes 13:00:00\n             */\n            const savedTime   = `${this.appendZero(\n                                    hourConvert.to24Hour( {\n                                        hour: parseInt( hours ),\n                                        meridiem: meridian\n                                    } )\n                                )}:${minutes}:00`;\n\n            // Value saved in source/attribute\n            this.props.onChangeTime( savedTime );\n        }\n    }\n\n    /**\n     * Append zero to one digit numbers. e.g. 9 becomes '09'\n     *\n     * @since 3.1.2\n     *\n     * @param {string value Hours or minutes\n     *\n     * @return {string}\n     */\n    appendZero( value ) {\n        if( isNaN( value ) ) {\n            return;\n        }\n\n        const res = parseInt( value );\n\n        return res > 9 ? res : `0${res}`;\n    }\n\n    render() {\n        const { onChangeTime, currentTime, hours, minutes, meridian } = this.state;\n\n        // Make sure hours are valid. 01: min, 12: max\n        const handleChangeHours = event => {\n            const value = Math.max( 1, Math.min( 12, Number( event.target.value ) ) );\n            this.setState( {\n                hours: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for hours\n        const handleKeyDownHours = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 12 ) {\n                this.setState( {\n                    hours: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 1 ) {\n                this.setState( {\n                    hours: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        // Make sure minutes are valid. 01: min, 59: max\n        const handleChangeMinutes = event => {\n            const value = Math.max( 0, Math.min( 59, Number( event.target.value ) ) );\n            this.setState( {\n                minutes: this.appendZero( value )\n            } );\n        };\n\n        // Allow to use up/down keys for minutes\n        const handleKeyDownMinutes = event => {\n            const value = Number( event.target.value );\n            if( event.key === 'ArrowUp' && value < 59 ) {\n                this.setState( {\n                    minutes: this.appendZero( value + 1 )\n                } );\n            } else if ( event.key === 'ArrowDown' && value > 0 ) {\n                this.setState( {\n                    minutes: this.appendZero( value - 1 )\n                } );\n            }\n        };\n\n        return (\n            <Fragment>\n                <div className=\"advgb-advtime-control\">\n                    <label>\n                        { this.props.label }\n                    </label>\n                    <div className=\"advgb-advtime-hours-minutes\">\n                        <input\n                            type=\"text\"\n                            value={\n                                hours\n                                    ? this.appendZero(\n                                        hourConvert.to12Hour( parseInt( hours ) ).hour\n                                    ) : ''\n                            }\n                            onChange={ handleChangeHours }\n                            onKeyDown={ handleKeyDownHours }\n                            placeholder=\"--\"\n                        />\n                        <span>:</span>\n                        <input\n                            type=\"text\"\n                            value={\n                                minutes ? minutes : ''\n                            }\n                            onChange={ handleChangeMinutes }\n                            onKeyDown={ handleKeyDownMinutes }\n                            placeholder=\"--\"\n                        />\n                    </div>\n                    <ButtonGroup className=\"advgb-advtime-meridian\">\n                        <Button\n                            variant={\n                                meridian === null || meridian === 'am' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'am'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'AM', 'advanced-gutenberg' ) }\n                        </Button>\n                        <Button\n                            variant={\n                                meridian === 'pm' ? 'primary' : 'secondary'\n                            }\n                            onClick={ () => {\n                                this.setState( {\n                                    meridian: 'pm'\n                                } );\n                            } }\n                            disabled={ hours && minutes ? false : true }\n                        >\n                            { __( 'PM', 'advanced-gutenberg' ) }\n                        </Button>\n                    </ButtonGroup>\n                    { hours && minutes &&\n        \t\t\t\t<Button\n                            className=\"advgb-advtime-remove-icon\"\n        \t\t\t\t\ticon=\"no-alt\"\n                            onClick={\n                                () => {\n                                    this.props.onTimeClear();\n                                    this.setState( {\n                                        hours: null,\n                                        minutes: null,\n                                        meridian: 'am'\n                                    } );\n                                }\n                            }\n        \t\t\t\t/>\n        \t\t\t}\n                </div>\n            </Fragment>\n        )\n    }\n}\nexport default AdvTimeClass;\n\nexport function AdvTimeControl(props) {\n    const { label, currentTime, onChangeTime, onTimeClear } = props;\n\n    return(\n        <AdvTimeClass\n            label={ label }\n            currentTime={ currentTime }\n            onChangeTime={ onChangeTime }\n            onTimeClear={ onTimeClear }\n        />\n    );\n}\n\nexport function AdvTimezoneControl(props) {\n    const { label, defaultTimezone } = props;\n\n    return (\n        <Fragment>\n            { applyFilters( 'advgb.timezoneControl',\n                <Fragment>\n                    <div style={{ marginTop: 10, marginBottom: 30 }}>\n                        <div style={{ marginBottom: 6 }}>\n                            { label }\n                            <span style={{ float: 'right', marginRight: 5 }}>\n                                <Icon icon=\"lock\" />\n                                <a href=\"https://publishpress.com/links/blocks\"\n                                    class=\"advgb-pro-ad-btn\"\n                                    target=\"_blank\">\n                                    { __( 'Upgrade to Pro', 'advanced-gutenberg' ) }\n                                </a>\n                            </span>\n                        </div>\n                        <SelectControl\n                            value={ defaultTimezone }\n                            options={ [ {\n                                    label: defaultTimezone,\n                                    value: defaultTimezone\n                                }\n                            ] }\n                            disabled={ true }\n                        />\n                    </div>\n                </Fragment>,\n                props\n            ) }\n        </Fragment>\n    )\n}\n","/**\n * Generate option title suggestions\n *\n * @since 3.1.1\n * @param options Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSuggestions = function( options ) {\n    return options.map( ( item ) => item.title );\n}\n\n/**\n * Match option slugs with its option titles\n * to display as field value (but NOT saved!).\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer'] or [82, 92]\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option titles. e.g. ['Subscriber','New Customer']\n */\nexport const getOptionTitles = function( slugs, options ) {\n    let field_value = [];\n\n    if ( options !== null ) {\n        field_value = slugs.map( ( option_slug ) => {\n            let find_option = options.find( ( item ) => {\n                return item.slug === option_slug;\n            } );\n            if ( find_option === undefined || ! find_option ) {\n                return option_slug; // It should return false but creates empty selections\n            }\n            return find_option.title;\n        } );\n    }\n\n    return field_value;\n}\n\n/**\n * Match option titles with its slugs, and save slugs\n *\n * @since 3.1.1\n * @param slugs     Option slugs. e.g. ['subscriber','new_customer']\n * @param options   Available options as objects with slug and title. e.g. [{slug: 'subscriber', title: 'Subscriber'}, {slug: 'new_customer', title: 'New Customer'}]\n *\n * @return {array}  Option slugs. e.g. ['subscriber','new_customer']\n */\nexport const getOptionSlugs = function( slugs, options ) {\n    let slugs_array = [];\n\n    slugs.map(\n        ( option_title ) => {\n            const matching_slug = options.find( ( item ) => {\n                return item.title === option_title;\n            } );\n            if ( matching_slug !== undefined ) {\n                slugs_array.push( matching_slug.slug );\n            }\n        }\n    )\n\n    return slugs_array;\n}\n","import classnames from 'classnames';\nimport { AdvDateTimeControl, AdvDaysControl, AdvTimeControl, AdvTimezoneControl } from \"../0-adv-components/datetime.jsx\";\nimport {\n    getOptionSuggestions,\n    getOptionTitles,\n    getOptionSlugs\n} from \"../0-adv-components/utils.jsx\";\n\n(function ( wpI18n, wpHooks, wpBlocks, wpBlockEditor, wpComponents, wpCompose, wpElement ) {\n    wpBlockEditor = wp.blockEditor || wp.editor;\n    const { addFilter } = wpHooks;\n    const { sprintf, __ } = wpI18n;\n    const { hasBlockSupport } = wpBlocks;\n    const { InspectorControls, BlockControls } = wpBlockEditor;\n    const { DateTimePicker, ToggleControl, PanelBody, Notice, FormTokenField, SelectControl } = wpComponents;\n    const { createHigherOrderComponent } = wpCompose;\n    const { Component, Fragment } = wpElement;\n\n    // do not show this feature if disabled.\n    if( !parseInt(advgbBlocks.block_controls) ) return;\n\n    // Blocks that are not supported\n    let NON_SUPPORTED_BLOCKS = [\n        'core/freeform',\n        'core/legacy-widget',\n        'core/widget-area',\n        'core/column',\n        'advgb/tab',\n        'advgb/column'\n    ];\n\n    const getGlobalControls = function () {\n        return typeof advgb_block_controls_vars.controls !== 'undefined'\n                            && Object.keys(advgb_block_controls_vars.controls).length > 0\n                                ? advgb_block_controls_vars.controls\n                                : [];\n    }\n\n    /**\n     * Check if a control is enabled\n     *\n     * @since 3.1.0\n     * @param {string} control  The use case block control. e.g. 'schedule'\n     *\n     * @return {bool}\n     */\n    const isControlEnabled = function( control ) {\n        return typeof control !== 'undefined' && control;\n    }\n\n    /**\n     * Check if at least one control is enabled per block instance\n     *\n     * @since 3.1.1\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledBlock = function( controlAttrs ) {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n        let blockControls       = []; // Controls enabled in block instance\n\n        // Get enabled global controls (in Settings)\n        Object.keys(globalControls).forEach( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                blockControls.push(item);\n            }\n        } );\n\n        // Get counter for enabled controls in block instance\n        blockControls.forEach( (item) => {\n            if( currentControlKey( controlAttrs, item, 'enabled' ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Check if at least one control is enabled globally (in Settings)\n     *\n     * @since 3.1.0\n     *\n     * @return {bool}\n     */\n    const isAnyControlEnabledGlobal = function() {\n        const globalControls    = getGlobalControls();\n        let counter             = 0;\n\n        Object.keys(globalControls).map( (item) => {\n            if( isControlEnabled( advgb_block_controls_vars.controls[item] ) ) {\n                counter++;\n            }\n        } );\n\n        return counter > 0 ? true : false;\n    }\n\n    /**\n     * Return single controls array attribute value\n     *\n     * @since 3.1.0\n     * @param {string} controlAttrs     Controls attributes. e.g. advgbBlockControls or props.attributes @TODO Figure out a way to NOT require controlAttrs as param due is the same always\n     * @param {string} control          The use case block control. e.g. 'schedule'\n     * @param {string} key              The control key to check. e.g. 'enabled'\n     *\n     * @return {mixed}\n     */\n    const currentControlKey = function( controlAttrs, control, key ) {\n\n        // Check if advgbBlockControls attribute exists\n        const controlsAdded = typeof controlAttrs !== 'undefined' && controlAttrs.length\n                                ? true\n                                : false;\n        // Check if control exists in advgbBlockControls array\n        const controlExists = controlsAdded\n                            && controlAttrs.some( (element) => element.control === control )\n                                ? true\n                                : false;\n\n        if( controlExists ) {\n            const itemIndex = controlAttrs.findIndex(element => element.control === control);\n\n            // No control found (this check seems not necessary but is here to prevent an unlikely error)\n            if( itemIndex < 0 ) {\n                return false;\n            }\n\n            let newArray    = [...controlAttrs];\n            const obj       = newArray[itemIndex];\n\n            return obj[key];\n        }\n\n        return null;\n    }\n\n    // Add non supported blocks according to Block controls\n    if( typeof advgb_block_controls_vars !== 'undefined'\n        && typeof advgb_block_controls_vars.non_supported !== 'undefined'\n        && advgb_block_controls_vars.non_supported.length > 0\n    ) {\n        // Merge dynamically disabled blocks\n        NON_SUPPORTED_BLOCKS = [...NON_SUPPORTED_BLOCKS, ...advgb_block_controls_vars.non_supported];\n        // Remove duplicated values\n        NON_SUPPORTED_BLOCKS = [...new Set(NON_SUPPORTED_BLOCKS)];\n    }\n\n    // Register block controls to blocks attributes\n    addFilter( 'blocks.registerBlockType', 'advgb/blockControls', function ( settings ) {\n        if ( ! NON_SUPPORTED_BLOCKS.includes( settings.name ) && isAnyControlEnabledGlobal() ) {\n            settings.attributes = Object.assign( settings.attributes, {\n                advgbBlockControls: {\n                    type: 'array',\n                    items: {\n                        type: 'object'\n                    },\n                    default: []\n                }\n            } );\n        }\n\n        return settings;\n    } );\n\n    const withEditControls = createHigherOrderComponent( ( BlockEdit ) => {\n\n        return class BlockControlsEdit extends Component {\n\n            constructor(props) {\n              super(props);\n\n              this.state = {\n                  taxModOptions: [], // Store modified taxonomy options to decide if selected tax is for \"all terms\" or \"selected terms\"\n                  termOptions: [], // Store term options with slug (id) and title\n                  searchTermWord: '', // Updated when searching terms\n                  initArchive: true, // When true, trigger initArchiveControl()\n                  updateTaxLabels: false // When true, update taxonomy option labels\n              }\n\n              this.isPost = this.isPost.bind(this);\n            }\n\n            /**\n             * Get filtered term slugs based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Array of taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTermSlugs( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( term.slug );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get taxonomies\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getTaxonomies() {\n                return typeof advgb_block_controls_vars.taxonomies !== 'undefined'\n                        && advgb_block_controls_vars.taxonomies.length > 0\n                            ? advgb_block_controls_vars.taxonomies\n                            : [];\n            }\n\n            /**\n             * Get all the available user roles from the site\n             *\n             * @since 3.1.0\n             *\n             * @return {array}\n             */\n            getUserRoles() {\n                return typeof advgb_block_controls_vars.user_roles !== 'undefined'\n                        && advgb_block_controls_vars.user_roles.length > 0\n                            ? advgb_block_controls_vars.user_roles\n                            : [];\n            }\n\n            /**\n             * Get filtered terms based on selected taxonomies\n             *\n             * @since 3.1.1\n             * @param {array} taxonomies Taxonomies slugs\n             *\n             * @return {array}\n             */\n            getTerms( taxonomies ) {\n                const allTaxonomies = this.getTaxonomies();\n                let terms = [];\n\n                taxonomies.forEach( ( tax ) => {\n                    const allTaxonomies = this.getTaxonomies();\n                    const itemIndex = allTaxonomies.findIndex( ( element ) => element.slug === tax );\n\n                    allTaxonomies[itemIndex].terms.forEach( ( term ) => {\n                        terms.push( {\n                            slug: term.slug,\n                            title: `${term.title} (${allTaxonomies[itemIndex].title})`\n                        } );\n                    } );\n                } );\n\n                return terms;\n            }\n\n            /**\n             * Get pages\n             *\n             * @since 3.1.1\n             *\n             * @return {array}\n             */\n            getPages() {\n                return typeof advgb_block_controls_vars.page !== 'undefined'\n                        && advgb_block_controls_vars.page.length > 0\n                            ? advgb_block_controls_vars.page\n                            : [];\n            }\n\n            /**\n             * Update advgbBlockControls attribute when a key value changes\n             *\n             * @since 2.14.0\n             * @param {string} control  The use case block control. e.g. 'schedule'\n             * @param {string} key      The control key to modify. e.g. 'enabled'\n             * @param {string} value    The control key value (not required for boolean keys)\n             *\n             * @return {void}\n             */\n            changeControlKey( control, key, value = '' ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                // Control objects to add  when enabled for the first time\n                const scheduleControl = {\n                    control: 'schedule',\n                    enabled: true,\n                    dateFrom: null,\n                    dateTo: null,\n                    recurring: false\n                };\n                const userRoleControl = {\n                    control: 'user_role',\n                    enabled: true,\n                    roles: [],\n                    approach: 'public'\n                };\n                const archiveControl = {\n                    control: 'archive',\n                    enabled: true,\n                    taxonomies: [],\n                    approach: 'exclude'\n                };\n                const pageControl = {\n                    control: 'page',\n                    enabled: true,\n                    pages: [],\n                    approach: 'exclude'\n                };\n\n                // Check if advgbBlockControls attribute exists\n                const controlsAdded = typeof advgbBlockControls !== 'undefined' && advgbBlockControls.length\n                                        ? true\n                                        : false;\n                // Check if control exists in advgbBlockControls array\n                const controlExists = controlsAdded &&\n                                    advgbBlockControls.some( (element) => element.control === control )\n                                        ? true\n                                        : false;\n\n                if( controlExists ) {\n                    const itemIndex = advgbBlockControls.findIndex(element => element.control === control);\n\n                    // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                    if( itemIndex < 0 ) {\n                        return false;\n                    }\n\n                    let newArray    = [...advgbBlockControls];\n                    const obj       = newArray[itemIndex];\n\n                    newArray[itemIndex] = typeof obj[key] === 'boolean'\n                        ? { ...newArray[itemIndex], [key]: !obj[key] }\n                        : { ...newArray[itemIndex], [key]: value }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n                } else if( controlsAdded && ! controlExists ) {\n\n                    // Add a new control object when other controls already exists\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    scheduleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    userRoleControl\n                                ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    archiveControl\n                                ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [\n                                    ...advgbBlockControls,\n                                    pageControl\n                                ]\n                            } );\n                        break;\n                    }\n                } else {\n                    // Add the first control object attribute\n                    switch( control ) {\n                        case 'schedule':\n                            setAttributes( {\n                                advgbBlockControls: [ scheduleControl ]\n                            } );\n                        break;\n\n                        case 'user_role':\n                            setAttributes( {\n                                advgbBlockControls: [ userRoleControl ]\n                            } );\n                        break;\n\n                        case 'archive':\n                            setAttributes( {\n                                advgbBlockControls: [ archiveControl ]\n                            } );\n                        break;\n\n                        case 'page':\n                            setAttributes( {\n                                advgbBlockControls: [ pageControl ]\n                            } );\n                        break;\n                    }\n                }\n            }\n\n            /**\n             * Update archive control in advgbBlockControls attribute when taxonomies value changes\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             * @param {string} slugs The taxonomy slugs or term ids to insert/modify. e.g. ['category','post_tag'] or [82,161,99] or ['all_<taxonomy_slug>']\n             *\n             * @return {void}\n             */\n            changeArchiveControl( topic, slugs ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let taxArray        = [];\n                const controlIndex  = advgbBlockControls.findIndex(element => element.control === 'archive');\n\n                // No control found (this check seems not necessary but is here to prevent an unlikely error)\n                if( controlIndex < 0 ) {\n                    return false;\n                }\n\n                let newArray = [...advgbBlockControls];\n\n                if( topic === 'taxonomies' ) {\n\n                    // Check each taxonomy and its terms\n                    slugs.forEach( (item) => {\n\n                        // Get terms from current taxonomy (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex(element => element.tax === item);\n\n                        if( taxIndex === -1 ) {\n\n                            // The last selected taxonomy\n                            taxArray.push( {\n                                tax: item,\n                                terms: [],\n                                all: true\n                            } );\n\n                        } else {\n\n                            // Existing taxonomy\n                            const terms     = newArray[controlIndex].taxonomies[taxIndex].terms.length\n                                                ? newArray[controlIndex].taxonomies[taxIndex].terms\n                                                : [];\n                            const approach  = terms.length ? 'select' : 'all';\n\n                            taxArray.push( {\n                                tax: item,\n                                terms: terms,\n                                all: terms.length ? false : true\n                            } );\n                        }\n                    } );\n\n                    newArray[controlIndex] = { ...newArray[controlIndex], ['taxonomies']: taxArray }\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    let terms           = {};\n                    const taxonomies    = this.currentArchiveControl( 'taxonomies' );\n\n                    // Check each term id (item). slug means the id\n                    slugs.forEach( ( item ) => {\n\n                        // Find the current term in termOptions state to use its tax later\n                        const option = this.state.termOptions.find( el => el.slug === item);\n\n                        if( terms[option.tax] === undefined ) {\n                            terms[option.tax] = [];\n                        }\n\n                        // Get taxonomy from current term (item)\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === option.tax);\n\n                        /* Taxonomy for this term is selected? Is a bit reduntant but let's make sure\n                         * Then include the term.\n                         */\n                        if( taxonomies.includes( option.tax ) ) {\n                            terms[option.tax].push( item );\n                        }\n\n                    } );\n\n                    // Update taxonomies with at least one term selected\n                    Object.keys( terms ).forEach( (tax) => {\n\n                        // Get taxonomy from current tax\n                        const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                        if( taxIndex >= 0 ) {\n                            newArray[controlIndex].taxonomies[taxIndex] = {\n                                tax: tax,\n                                terms: terms[tax],\n                                all: terms[tax].length ? false : true\n                            };\n                        }\n                    } );\n\n                    // Include taxonomies with no terms selected (empty terms[option.tax] array)\n                    taxonomies.forEach( ( tax ) => {\n                        if( ! Object.keys( terms ).includes( tax ) ) {\n\n                            // Get taxonomy from current tax\n                            const taxIndex = newArray[controlIndex].taxonomies.findIndex( element => element.tax === tax);\n\n                            if( taxIndex >= 0 ) {\n                                newArray[controlIndex].taxonomies[taxIndex] = {\n                                    tax: tax,\n                                    terms: [],\n                                    all: true\n                                };\n                            }\n                        }\n                    } );\n\n                    setAttributes( {\n                        advgbBlockControls: newArray\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n            }\n\n            /**\n             * Return merged taxonomies or terms\n             *\n             * @since 3.1.2\n             *\n             * @param {string} topic 'taxonomies' or 'terms'\n             *\n             * @return {array} An single array with all the selected terms or taxonomies ['category','post_tag'] or [99,182,42]\n             */\n            currentArchiveControl( topic ) {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                let result = [];\n\n                /* Get all the taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( topic === 'taxonomies' ) {\n\n                    taxonomies.forEach( (item) => {\n                        result.push(item.tax);\n                    } );\n\n                } else if( topic === 'terms' ) {\n\n                    taxonomies.forEach( (item) => {\n                        item.terms.forEach( ( el ) => {\n                            result.push( el ); // term id\n                        } );\n                    } );\n\n                } else {\n                    // Nothing to do here\n                }\n\n                return result;\n            }\n\n            /**\n             * Execute when taxonomy selection changes\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            taxonomiesChanged() {\n                const { attributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                const currentTerms  = !! currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'terms' )\n                                        : [];\n                const taxonomies    = !! currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                if( currentTerms.length ) {\n\n                   let result = [];\n                   currentTerms.forEach( ( slug ) => {\n                       const itemIndex = this.state.termOptions.findIndex( ( item ) => item.slug === slug );\n\n                       /* Get only the terms that belongs to selected taxonomies\n                        * and skip the ones that belongs to the deleted taxonomy\n                        */\n                       if( taxonomies.includes( this.state.termOptions[itemIndex].tax ) ) {\n                          result.push( this.state.termOptions[itemIndex].slug );\n                       }\n                   } );\n\n                   this.changeControlKey(\n                       'archive',\n                       'terms',\n                       result\n                   );\n                }\n\n                /* Remove term options from non-selected taxonomies.\n                 * Case scenario: the terms from the last removed taxonomy.\n                 */\n                this.setState( {\n                    termOptions: this.state.termOptions.filter( (item) => {\n                        return this.currentArchiveControl( 'taxonomies' ).includes( item.tax );\n                    } )\n                } );\n\n                // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                this.modifyTaxLabels();\n            }\n\n            /**\n             * Get selected terms on first load\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            initArchiveControl() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            taxonomies: this.currentArchiveControl( 'taxonomies' ),\n                            ids: this.currentArchiveControl( 'terms' )\n                        }\n                    )\n                } ).then( ( list ) => {\n\n                    // Update tax label options to \"All <taxonomy> terms\" or \"Selected <taxonomy> terms\"\n                    this.modifyTaxLabels();\n\n                    this.setState( {\n                        termOptions: list,\n                        initArchive: false,\n                        updateTaxLabels: false\n                    } );\n                } );\n\n\n            }\n\n            /**\n             * Initial taxonomy labels to allow \"All <taxonomy> terms\" \"Selected <taxonomy> terms\" visual indicator\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            iniTaxLabels() {\n\n                let result = [];\n                this.getTaxonomies().forEach( (item) => {\n                    /* Item example\n                     *  {\n                     *      \"slug\": \"category\",\n                     *      \"title\": \"All Category terms\",\n                     *      \"singular\": \"Category\"\n                     *  }\n                     */\n                    result.push( {\n                        slug: item.slug,\n                        title: sprintf(\n                            __( 'All %s terms', 'advanced-gutenberg' ),\n                            item.title\n                        ),\n                        singular: item.title\n\n                    } );\n                } );\n\n                return result;\n            }\n\n            /**\n             * Modify taxonomy labels. Very similar to iniTaxLabels()\n             *\n             * @since 3.1.2\n             *\n             * @return {array}\n             */\n            modifyTaxLabels() {\n                const { advgbBlockControls } = this.props.attributes;\n\n                /* Get all selected taxonomy objects.\n                 * e.g.\n                 * [\n                 *     { \"tax\": \"post_tag\", \"terms\": [220,221]},\n                 *     { \"tax\": \"category\", \"terms\": []}\n                 * ]\n                 */\n                const taxonomies    = currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length\n                                        ? currentControlKey( advgbBlockControls, 'archive', 'taxonomies' )\n                                        : [];\n\n                // Copy whole state\n                let options = [...this.state.taxModOptions];\n\n                options.forEach( (item, index) => {\n                    const tax = taxonomies.find( el => item.slug === el.tax );\n\n                    // Copy option to modify\n                    let option = { ...options[index] };\n                    // Update title value\n                    option.title = sprintf(\n                        tax === undefined || ! tax.terms.length\n                            ? __( 'All %s terms', 'advanced-gutenberg' )\n                            : __( 'Selected %s terms', 'advanced-gutenberg' ),\n                        option.singular\n                    );\n                    // Add option back to the state\n                    options[index] = option;\n                } );\n\n                // Save\n                this.setState( {\n                    taxModOptions: options,\n                    updateTaxLabels: false\n                } );\n            }\n\n            /**\n             * Search terms based on search\n             *\n             * @since 3.1.1\n             *\n             * @return {void}\n             */\n            searchTerms() {\n                const { termOptions, searchTermWord } = this.state;\n                const { advgbBlockControls } = this.props.attributes;\n\n                wp.apiFetch( {\n                    /*/ To get taxonomies\n                    path: wp.url.addQueryArgs( 'wp/v2/taxonomies', { context: 'edit' } )*/\n\n                    path: wp.url.addQueryArgs(\n                        'advgb/v1/terms',\n                        {\n                            search: searchTermWord,\n                            taxonomies: this.currentArchiveControl( 'taxonomies' )\n                        }\n                    )\n\n                } ).then( ( list ) => {\n\n                    /*/ To get taxonomies\n                    Object.keys(list).forEach( (item) => {\n                        options.push( {\n                            label: list[item].name,\n                            value: list[item].slug\n                        } );\n                    });*/\n\n                    // Merge selected terms with results from fetch\n                    let options = [ ...termOptions, ...list ];\n\n                    // Remove duplicated values\n                    options = Array.from( new Set( options.map( a => a.slug ) ) )\n                        .map( slug => {\n                            return options.find( a => a.slug === slug )\n                        });\n\n                    this.setState( {\n                        termOptions: options\n                    } );\n                } );\n            }\n\n            /**\n             * Check if we're in post edit screen\n             *\n             * @since 3.1.2\n             *\n             * @return {bool}\n             */\n            isPost() {\n                return wp.data.select('core/editor') && wp.data.select('core/editor').getCurrentPostId();\n            }\n\n            /**\n             * Get the timezone label from site settings stored in advgbBlocks object\n             *\n             * @since 3.1.4\n             *\n             * @return {bool}\n             */\n            getTimezoneLabel() {\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                    ? advgbBlocks.timezone.replace(/_/g, ' ')\n                    : __( 'WordPress settings timezone', 'advanced-gutenberg' )\n            }\n\n            /**\n             * Get the timezone slug from site settings stored in advgbBlocks object\n             *\n             * @since 3.1.4\n             *\n             * @return {bool}\n             */\n            getTimezoneSlug() {\n                return typeof advgbBlocks.timezone !== 'undefined' && advgbBlocks.timezone.length\n                    ? advgbBlocks.timezone\n                    : 'UTC'\n            }\n\n            componentDidMount() {\n                this.setState( {\n                    taxModOptions: this.iniTaxLabels()\n                } );\n            }\n\n            componentDidUpdate(prevProps, prevState) {\n                const { attributes, isSelected, name } = this.props;\n                const { advgbBlockControls } = attributes;\n                const { advgbBlockControls: prevBlockControls } = prevProps.attributes;\n                const { searchTermWord, initArchive } = this.state;\n                const { searchTermWord: prevTermWord } = prevState;\n\n                // Get human readable selected terms on block selection the first time\n                if( ! this.isPost()\n                    && ! NON_SUPPORTED_BLOCKS.includes( name )\n                    && isSelected\n                    && initArchive\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && this.currentArchiveControl( 'taxonomies' ).length\n                    && this.currentArchiveControl( 'terms' ).length\n                ) {\n                    this.initArchiveControl();\n                }\n\n                // Search terms\n                if( searchTermWord !== prevTermWord && searchTermWord.length > 2 ) {\n                    this.searchTerms();\n                }\n\n                // Update available terms and remove terms which taxonomy has been removed\n                if( ! this.isPost()\n                    && isControlEnabled( advgb_block_controls_vars.controls.archive )\n                    && currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                    && (\n                        currentControlKey( prevBlockControls, 'archive', 'taxonomies' ) !== currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ) // This trigger works when taxo changes, but not terms\n                        || this.state.updateTaxLabels // Trigger when terms changes\n                    )\n                ) {\n                    this.taxonomiesChanged();\n                }\n            }\n\n            render() {\n                const { attributes, setAttributes } = this.props;\n                const { advgbBlockControls } = attributes;\n\n                return ( [\n                        this.props.isSelected && ( ! NON_SUPPORTED_BLOCKS.includes( this.props.name ) )\n                        && isAnyControlEnabledGlobal() &&\n                        <InspectorControls key=\"advgb-bc-controls\">\n                            <PanelBody\n                                title={ __( 'Block Controls', 'advanced-gutenberg' ) }\n                                icon=\"visibility\"\n                                initialOpen={ false }\n                                className={\n                                    isAnyControlEnabledBlock( advgbBlockControls )\n                                        ? 'advgb-feature-icon-active' : ''\n                                }\n                            >\n                                { isControlEnabled( advgb_block_controls_vars.controls.schedule ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'Schedule', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' )\n                                            ? __( 'Choose when to start showing and/or stop showing this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'schedule', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'schedule', 'enabled' ) && (\n                                        <Fragment>\n                                            <div style={ { marginBottom: 30 } }>\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Now', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Start showing', 'advanced-gutenberg' ) }\n                                                    date={ currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateFrom', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateFrom', null ) }\n                                                    onInvalidDate={ false }\n                                                />\n                                                <AdvDateTimeControl\n                                                    buttonLabel={ __( 'Never', 'advanced-gutenberg' ) }\n                                                    dateLabel={ __( 'Stop showing', 'advanced-gutenberg' ) }\n                                                    date={ !! currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ? currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) : null }\n                                                    onChangeDate={ ( newDate ) => this.changeControlKey( 'schedule', 'dateTo', newDate ) }\n                                                    onDateClear={ () => this.changeControlKey( 'schedule', 'dateTo', null ) }\n                                                    onInvalidDate={ ( date ) => {\n                                                        // Disable all dates before dateFrom\n                                                        if( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) ) {\n                                                            let thisDate = new Date(date.getTime());\n                                                            thisDate.setHours(0, 0, 0, 0);\n                                                            let fromDate = new Date( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) );\n                                                            fromDate.setHours(0, 0, 0, 0);\n                                                            return thisDate.getTime() < fromDate.getTime();\n                                                        }\n                                                    } }\n                                                />\n                                                { ( currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) > currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"Stop showing\" date should be after \"Start showing\" date!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { currentControlKey( advgbBlockControls, 'schedule', 'dateFrom' ) && currentControlKey( advgbBlockControls, 'schedule', 'dateTo' ) &&\n                                                    <ToggleControl\n                                                        label={ __( 'Recurring', 'advanced-gutenberg' ) }\n                                                        checked={ currentControlKey( advgbBlockControls, 'schedule', 'recurring' ) }\n                                                        onChange={ () => this.changeControlKey( 'schedule', 'recurring' ) }\n                                                        help={ __( 'If Recurring is enabled, this block will be displayed every year between the selected dates.', 'advanced-gutenberg' ) }\n                                                    />\n                                                }\n                                                <AdvDaysControl\n                                                    label={ __( 'On these days (optional)', 'advanced-gutenberg' ) }\n                                                    days={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'days' )\n                                                            : []\n                                                    }\n                                                    onChangeDays={ ( value ) => this.changeControlKey( 'schedule', 'days', value ) }\n                                                />\n                                                <label style={ { marginBottom: 8, display: 'block' } }>\n                                                    { __( 'Between these times (optional)', 'advanced-gutenberg' ) }\n                                                </label>\n                                                <AdvTimeControl\n                                                    label={ __( 'From', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        !! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                            : null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeFrom',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeFrom', null ) }\n                                                />\n                                                <AdvTimeControl\n                                                    label={ __( 'To', 'advanced-gutenberg' ) }\n                                                    currentTime={\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeTo' ) || null\n                                                    }\n                                                    onChangeTime={\n                                                        ( newTime ) => this.changeControlKey(\n                                                            'schedule',\n                                                            'timeTo',\n                                                            newTime\n                                                        )\n                                                    }\n                                                    onTimeClear={ () => this.changeControlKey( 'schedule', 'timeTo', null ) }\n                                                />\n                                                { (\n                                                    currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                    && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    && (\n                                                        '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeFrom'\n                                                        ) >= '01/01/2020T' + currentControlKey( // We append a dummy date to make a datetime comparison\n                                                            advgbBlockControls, 'schedule', 'timeTo'\n                                                        )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( '\"To\" time should be after \"From\" time!', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                { (\n                                                    (\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && ! currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    ) || (\n                                                        ! currentControlKey( advgbBlockControls, 'schedule', 'timeFrom' )\n                                                        && currentControlKey( advgbBlockControls, 'schedule', 'timeTo' )\n                                                    )\n                                                ) &&\n                                                    <Notice\n                                                        className=\"advgb-notice-sidebar\"\n                                                        status=\"warning\"\n                                                        isDismissible={ false }\n                                                    >\n                                                        { __( 'Please choose \"From\" time and \"To\" time.', 'advanced-gutenberg' ) }\n                                                    </Notice>\n                                                }\n                                                <AdvTimezoneControl\n                                                    label={ __( 'Timezone', 'advanced-gutenberg' ) }\n                                                    defaultTimezone={ this.getTimezoneLabel()  }\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'schedule', 'timezone' )\n                                                            ? currentControlKey( advgbBlockControls, 'schedule', 'timezone' )\n                                                            : this.getTimezoneSlug()\n                                                    }\n                                                    onChangeTimezone={ ( value ) => this.changeControlKey( 'schedule', 'timezone', value ) }\n                                                />\n                                            </div>\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { isControlEnabled( advgb_block_controls_vars.controls.user_role ) && (\n                                <Fragment>\n                                    <ToggleControl\n                                        label={ __( 'User roles', 'advanced-gutenberg' ) }\n                                        help={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' )\n                                            ? __( 'Choose which users can see this block.', 'advanced-gutenberg' )\n                                            : ''\n                                        }\n                                        checked={ currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) }\n                                        onChange={ () => this.changeControlKey( 'user_role', 'enabled' ) }\n                                    />\n                                    { currentControlKey( advgbBlockControls, 'user_role', 'enabled' ) && (\n                                        <Fragment>\n                                            <div className=\"advgb-revert-mb\">\n                                                <SelectControl\n                                                    value={\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' )\n                                                    }\n                                                    options={ [\n                                                        {\n                                                            value: 'public',\n                                                            label: __( 'Show to everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'hidden',\n                                                            label: __( 'Hide from everyone', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'login',\n                                                            label: __( 'Show to logged in users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'logout',\n                                                            label: __( 'Show to logged out users', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'include',\n                                                            label: __( 'Show to the selected user roles', 'advanced-gutenberg' )\n                                                        },\n                                                        {\n                                                            value: 'exclude',\n                                                            label: __( 'Hide from the selected user roles', 'advanced-gutenberg' )\n                                                        }\n                                                    ] }\n                                                    onChange={ ( value ) => this.changeControlKey( 'user_role', 'approach', value ) }\n                                                />\n                                            </div>\n                                            { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                            ) && (\n                                                <Fragment>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select user roles', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.getUserRoles() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                !! currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    ? currentControlKey( advgbBlockControls, 'user_role', 'roles' )\n                                                                    : [],\n                                                                this.getUserRoles()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeControlKey( 'user_role', 'roles', getOptionSlugs( value, this.getUserRoles() ) )\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'user_role', 'approach' ) === 'exclude'\n                                                    )\n                                                    && ! currentControlKey( advgbBlockControls, 'user_role', 'roles' ).length && (\n                                                        <Notice\n                                                                className=\"advgb-notice-sidebar\"\n                                                                status=\"warning\"\n                                                                isDismissible={ false }\n                                                                style={ { marginBottom: 30 } }\n                                                            >\n                                                            {\n                                                                __(\n                                                                    'Please select at least one user role.',\n                                                                    'advanced-gutenberg'\n                                                                )\n                                                            }\n                                                        </Notice>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                    ) }\n                                </Fragment>\n                                ) }\n                                { ! this.isPost() && ( // Disabled in post edit\n                                    <Fragment>\n                                        { isControlEnabled( advgb_block_controls_vars.controls.archive ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Term archives', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'archive', 'enabled' )\n                                                    ? __( 'Choose on which taxonomies and terms archive pages your blocks can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'archive', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'archive', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'archive', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb--disabled\" style={{ marginBottom: 20 }}>\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'archive', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show for selected terms', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide for selected terms', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'archive', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    <FormTokenField\n                                                        multiple\n                                                        label={ __( 'Select taxonomies', 'advanced-gutenberg' ) }\n                                                        placeholder={ __( 'Search taxonomies', 'advanced-gutenberg' ) }\n                                                        suggestions={ getOptionSuggestions( this.state.taxModOptions || this.getTaxonomies() ) }\n                                                        maxSuggestions={ 10 }\n                                                        value={\n                                                            getOptionTitles(\n                                                                this.currentArchiveControl( 'taxonomies' ),\n                                                                this.state.taxModOptions || this.getTaxonomies()\n                                                            )\n                                                        }\n                                                        onChange={ ( value ) => {\n                                                            this.changeArchiveControl(\n                                                                'taxonomies',\n                                                                getOptionSlugs( value, this.state.taxModOptions || this.getTaxonomies() )\n                                                            );\n                                                        } }\n                                                        __experimentalExpandOnFocus\n                                                    />\n                                                    { ( currentControlKey( advgbBlockControls, 'archive', 'taxonomies' ).length > 0 ) && (\n                                                        <Fragment>\n                                                            <FormTokenField\n                                                                multiple\n                                                                label={ __( 'Filter terms', 'advanced-gutenberg' ) }\n                                                                placeholder={ __( 'Search terms', 'advanced-gutenberg' ) }\n                                                                suggestions={ getOptionSuggestions(\n                                                                    this.state.termOptions\n                                                                ) }\n                                                                maxSuggestions={ 10 }\n                                                                value={\n                                                                    getOptionTitles(\n                                                                        this.currentArchiveControl( 'terms' ),\n                                                                        this.state.termOptions\n                                                                    )\n                                                                }\n                                                                onChange={ ( value ) => {\n                                                                    this.changeArchiveControl(\n                                                                        'terms',\n                                                                        getOptionSlugs(\n                                                                            value,\n                                                                            this.state.termOptions\n                                                                        )\n                                                                    );\n                                                                    this.setState( {\n                                                                        updateTaxLabels: true\n                                                                    } );\n                                                                } }\n                                                                onInputChange={ ( value ) => {\n                                                                    this.setState( {\n                                                                        searchTermWord: value\n                                                                    } );\n                                                                } }\n                                                                __experimentalShowHowTo={ false }\n                                                            />\n                                                            <div className=\"advgb-revert-mb--disabled components-form-token-field__help\"\n                                                                style={{ marginBottom: 20 }}>\n                                                                { __(\n                                                                    'Use this filter to apply only to some terms.',\n                                                                    'advanced-gutenberg'\n                                                                ) }\n                                                            </div>\n                                                        </Fragment>\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n\n                                        { isControlEnabled( advgb_block_controls_vars.controls.page ) && (\n                                        <Fragment>\n                                            <ToggleControl\n                                                label={ __( 'Pages', 'advanced-gutenberg' ) }\n                                                help={ currentControlKey( advgbBlockControls, 'page', 'enabled' )\n                                                    ? __( 'Choose in which pages this block can be displayed.', 'advanced-gutenberg' )\n                                                    : ''\n                                                }\n                                                checked={ currentControlKey( advgbBlockControls, 'page', 'enabled' ) }\n                                                onChange={ () => this.changeControlKey( 'page', 'enabled' ) }\n                                            />\n                                            { currentControlKey( advgbBlockControls, 'page', 'enabled' ) && (\n                                                <Fragment>\n                                                    <div className=\"advgb-revert-mb\">\n                                                        <SelectControl\n                                                            value={\n                                                                currentControlKey( advgbBlockControls, 'page', 'approach' )\n                                                            }\n                                                            options={ [\n                                                                {\n                                                                    value: 'include',\n                                                                    label: __( 'Show on the selected pages', 'advanced-gutenberg' )\n                                                                },\n                                                                {\n                                                                    value: 'exclude',\n                                                                    label: __( 'Hide on the selected pages', 'advanced-gutenberg' )\n                                                                }\n                                                            ] }\n                                                            onChange={ ( value ) => this.changeControlKey( 'page', 'approach', value ) }\n                                                        />\n                                                    </div>\n                                                    { ( currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'include' ||\n                                                        currentControlKey( advgbBlockControls, 'page', 'approach' ) === 'exclude'\n                                                    ) && (\n                                                        <FormTokenField\n                                                            multiple\n                                                            label={ __( 'Select pages', 'advanced-gutenberg' ) }\n                                                            placeholder={ __( 'Search', 'advanced-gutenberg' ) }\n                                                            suggestions={ getOptionSuggestions( this.getPages() ) }\n                                                            maxSuggestions={ 10 }\n                                                            value={\n                                                                getOptionTitles(\n                                                                    !! currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        ? currentControlKey( advgbBlockControls, 'page', 'pages' )\n                                                                        : [],\n                                                                    this.getPages()\n                                                                )\n                                                            }\n                                                            onChange={ ( value ) => {\n                                                                this.changeControlKey( 'page', 'pages', getOptionSlugs( value, this.getPages() ) )\n                                                            } }\n                                                            __experimentalExpandOnFocus\n                                                        />\n                                                    ) }\n                                                </Fragment>\n                                            ) }\n                                        </Fragment>\n                                        ) }\n                                    </Fragment>\n                                ) }\n                            </PanelBody>\n                        </InspectorControls>,\n                        <BlockEdit key=\"block-edit-advgb-dates\" {...this.props} />,\n                    ] )\n            }\n        }\n    }, 'withEditControls' );\n\n    // Add option to add controls for supported blocks\n    addFilter( 'editor.BlockEdit', 'advgb/addBlockControls', withEditControls );\n\n    const withAttributes = createHigherOrderComponent( ( BlockListBlock ) => {\n        return ( props ) => {\n            if ( ( !NON_SUPPORTED_BLOCKS.includes( props.name ) ) && hasBlockSupport( props.name, 'advgb/blockControls', true ) && isAnyControlEnabledGlobal() ) {\n                const { advgbBlockControls } = props.attributes;\n                const advgbBcClass = props.isSelected === false\n                    && isAnyControlEnabledBlock( advgbBlockControls )\n                        ? 'advgb-bc-editor-preview' : '';\n\n                return <BlockListBlock { ...props } className={ classnames( props.className, advgbBcClass ) } advgbBlockControls={ `${ advgbBlockControls }` } />;\n            }\n\n            return <BlockListBlock { ...props } />;\n        };\n    }, 'withAttributes' );\n\n    // Apply attributes and CSS classes on backend\n    addFilter( 'editor.BlockListBlock', 'advgb/loadBackendBlockControls', withAttributes );\n\n})( wp.i18n, wp.hooks, wp.blocks, wp.blockEditor, wp.components, wp.compose, wp.element );\n"],"sourceRoot":""}